{"version":3,"sources":["ScoreKeeper.js","models.js","othello.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","ScoreKeeper","this","value","playerNumber","gameBoard","self","getEmptyCells","forEach","cell","setScoreForMove","col","row","x","y","player","hits","concat","searchUp","searchUpAndRight","searchRight","searchDownAndRight","searchDown","searchDownAndLeft","searchLeft","searchUpAndLeft","console","log","Array","apply","rows","getFlatGameBoard","filter","c","rowInc","colInc","getScore","_x","_x2","_again","checkResult","undefined","r","checkCell","isValidMove","isEmpty","isPoint","cells","push","valid","empty","point","reduce","score","isHighestScoring","startingX","startingY","searchAt","calculatePoints","Player","num","number","moves","Move","points","pointValue","Cell","potentialTarget","_slicedToArray","arr","isArray","Symbol","iterator","_arr","_n","_d","_e","_s","_i","next","done","err","renderGameBoard","html","j","$","getPotentialNextMovesForNextPlayer","flatGamBoard","_scoreKeeper","activePlayerCells","_activePlayer","potentialNextMoves","above","scoreMove","aboveRight","aboveLeft","left","right","below","belowRight","belowLeft","moveEarnsPoints","_getPlayerNumbers3","getPlayerNumbers","_getPlayerNumbers32","otherPlayerNumber","isHit","move","moveResult","indexOf","updateActivePlayer","newPlayerNumber","playerIndex","_players","updateScoreBoards","players","$playerSoreBoard","getScoreForPlayer","addClass","removeClass","setNewGameValues","otherPlayerIndex","_playerOne","_playerTwo","rowNum","colNum","on","$cell","data","cellObj","isTarget","_getPlayerNumbers","_getPlayerNumbers2","activePlayerNumber","pointsEarned","h","highestScoringNextMove","sort","c1","c2","resetMoveScoreRatings"],"mappings":"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","file":"app.js","sourcesContent":["/**\r\n * Created by Eric on 4/5/2015.\r\n */\r\nclass ScoreKeeper {\r\n    constructor() { }\r\n\r\n    playerHasNextMove( playerNumber, gameBoard ) {\r\n        let self = this;\r\n        self.getEmptyCells( gameBoard ).forEach( function ( cell ) {\r\n            if ( self.setScoreForMove( cell.col, cell.row, playerNumber ) > 0 ) {\r\n                return true;\r\n            }\r\n        } );\r\n\r\n        return false;\r\n    }\r\n\r\n\r\n    setScoreForMove( x, y, player, gameBoard ) {\r\n        let hits = [];\r\n\r\n        hits = hits.concat( this.searchUp( x, y, player, gameBoard ) );\r\n        hits = hits.concat( this.searchUpAndRight( x, y, player, gameBoard ) );\r\n        hits = hits.concat( this.searchRight( x, y, player, gameBoard ) );\r\n        hits = hits.concat( this.searchDownAndRight( x, y, player, gameBoard ) );\r\n        hits = hits.concat( this.searchDown( x, y, player, gameBoard ) );\r\n        hits = hits.concat( this.searchDownAndLeft( x, y, player, gameBoard ) );\r\n        hits = hits.concat( this.searchLeft( x, y, player, gameBoard ) );\r\n        hits = hits.concat( this.searchUpAndLeft( x, y, player, gameBoard ) );\r\n\r\n        console.log( \"POINTS EARNED: %d\", hits.length );\r\n        console.log( \"HITS: \", hits );\r\n        return hits;\r\n    }\r\n\r\n    getFlatGameBoard( gameBoard ) {\r\n        return Array.prototype.concat.apply( [], gameBoard.rows );\r\n    }\r\n\r\n    getEmptyCells( gameBoard ) {\r\n        return this.getFlatGameBoard( gameBoard ).filter( function ( c ) {\r\n            return c.player === 0;\r\n        } );\r\n    }\r\n\r\n    calculatePoints( cell, rowInc, colInc, player, gameBoard ) {\r\n        let cells = [], self = this;\r\n\r\n        function getScore( r, c ) {\r\n            let cell = gameBoard[ r ][ c ],\r\n                checkResult = self.checkCell( cell, player );\r\n\r\n            if ( !checkResult.isValidMove || checkResult.isEmpty ) {\r\n                return [];\r\n            } else if ( checkResult.isPoint ) {\r\n                cells.push( cell );\r\n                return getScore( r + rowInc, c + colInc );\r\n            } else {\r\n                return cells;\r\n            }\r\n        }\r\n\r\n        return getScore( cell.row, cell.col );\r\n    }\r\n\r\n    checkCell( cell, player ) {\r\n        let valid = this.isValidMove( cell ),\r\n            empty = valid ? cell.player === 0 : false,\r\n            point = valid ? cell.player !== player && !empty : false;\r\n\r\n        return {\r\n            isValidMove: valid,\r\n            isEmpty: empty,\r\n            isPoint: point\r\n        };\r\n    }\r\n\r\n    getScoreForPlayer( playerNumber, gameBoard ) {\r\n        return this.getFlatGameBoard( gameBoard ).reduce( function ( score, cell ) {\r\n            if ( cell.player === playerNumber ) {\r\n                score++;\r\n            }\r\n            return score;\r\n        }, 0 )\r\n    }\r\n\r\n    resetMoveScoreRatings( gameBoard ) {\r\n        this.getFlatGameBoard( gameBoard ).forEach( function ( cell ) {\r\n            cell.isHighestScoring = false;\r\n        } );\r\n\r\n        return gameBoard;\r\n    }\r\n\r\n    searchRight( startingX, startingY, player, gameBoard ) {\r\n        return this.searchAt( startingX, startingY, 0, 1, player, gameBoard );\r\n    }\r\n\r\n    searchLeft( startingX, startingY, player, gameBoard ) {\r\n        return this.searchAt( startingX, startingY, 0, -1, player, gameBoard );\r\n    }\r\n\r\n    searchUp( startingX, startingY, player, gameBoard ) {\r\n        return this.searchAt( startingX, startingY, -1, 0, player, gameBoard );\r\n    }\r\n\r\n    searchDown( startingX, startingY, player, gameBoard ) {\r\n        return this.searchAt( startingX, startingY, 1, 0, player, gameBoard );\r\n    }\r\n\r\n    searchUpAndRight( startingX, startingY, player, gameBoard ) {\r\n        return this.searchAt( startingX, startingY, -1, 1, player, gameBoard );\r\n    }\r\n\r\n    searchUpAndLeft( startingX, startingY, player, gameBoard ) {\r\n        return this.searchAt( startingX, startingY, -1, -1, player, gameBoard );\r\n    }\r\n\r\n    searchDownAndRight( startingX, startingY, player, gameBoard ) {\r\n        return this.searchAt( startingX, startingY, 1, 1, player, gameBoard );\r\n    }\r\n\r\n    searchDownAndLeft( startingX, startingY, player, gameBoard ) {\r\n        return this.searchAt( startingX, startingY, 1, -1, player, gameBoard );\r\n    }\r\n\r\n    searchAt( x, y, rowInc, colInc, player, gameBoard ) {\r\n        let cell = gameBoard.rows[ y + rowInc ][ x + colInc ];\r\n\r\n        return this.isValidMove( cell ) ?\r\n            this.calculatePoints( cell, rowInc, colInc, player, gameBoard ) : [];\r\n    }\r\n\r\n    isValidMove( cell ) {\r\n        return cell.row > -1 &&\r\n               cell.col > -1 &&\r\n               cell.row < 8 &&\r\n               cell.col < 8;\r\n    }\r\n}","/**\r\n * Created by Eric on 4/4/2015.\r\n */\r\n\r\nclass Player {\r\n    constructor ( num ) {\r\n        this.number = num;\r\n        this.score = 2;\r\n        this.moves = [];\r\n    }\r\n}\r\n\r\nclass Move {\r\n    constructor ( row, col, points ) {\r\n        this.x = col;\r\n        this.y = row;\r\n        this.pointValue = points;\r\n    }\r\n}\r\n\r\nclass Cell {\r\n    constructor( row, col ) {\r\n        this.row = row;\r\n        this.col = col;\r\n        this.player = 0;\r\n        this.potentialTarget = false;\r\n    }\r\n}\r\n\r\n","/**\r\n * Created by Eric on 4/4/2015.\r\n */\r\n\r\n(() => {\r\n    let gameBoard = {\r\n            rows: []\r\n        },\r\n        _playerOne = new Player( 1 ),\r\n        _playerTwo = new Player( 2 ),\r\n        _activePlayer = _playerOne,\r\n        _players = [ _playerOne, _playerTwo ],\r\n        _scoreKeeper;\r\n\r\n    const rowNum = 8;\r\n    const colNum = 8;\r\n\r\n    for ( let i = 0; i < rowNum; i++ ) {\r\n        let row = [];\r\n        for ( let j = 0; j < colNum; j++ ) {\r\n            row.push( new Cell( i, j ) );\r\n        }\r\n        gameBoard.rows.push( row );\r\n    }\r\n\r\n    _scoreKeeper = new ScoreKeeper( gameBoard );\r\n\r\n    function renderGameBoard() {\r\n        console.log( \"Gameboard: \", gameBoard );\r\n        let html = '';\r\n        gameBoard.rows.forEach( function ( row, i ) {\r\n            row.forEach( function ( cell, j ) {\r\n                html += `<div class='cell' data-target=\"${cell.potentialTarget}\" data-is-highest-sciring-move=\"${cell.isHighestScoring}\" data-player-num=\"${cell.player}\" data-row-num='${i}' data-col-num='${j}'>${cell.player}</div>`;\r\n            } );\r\n\r\n        } );\r\n\r\n        $( \".game-board\" ).html( html );\r\n    }\r\n\r\n    $( \".game-board\" ).on( \"click\", \".cell\", function () {\r\n        let $cell = $( this );\r\n        let row = +$cell.data( \"row-num\" );\r\n        let col = +$cell.data( \"col-num\" );\r\n        let player = +$cell.data( \"player-num\" );\r\n        let cellObj = gameBoard.rows[ row ][ col ];\r\n        let isTarget = $cell.data( \"target\" );\r\n        let [ activePlayerNumber, otherPlayerNumber ] = getPlayerNumbers();\r\n\r\n        // calculate points and set cell values\r\n        let hits = _scoreKeeper.setScoreForMove( col, row, activePlayerNumber );\r\n        let pointsEarned = hits.length;\r\n\r\n        if ( !isTarget || pointsEarned === 0 )\r\n            return;\r\n\r\n        cellObj.player = activePlayerNumber;\r\n        hits.forEach( function ( h ) {\r\n            h.player = activePlayerNumber\r\n        } );\r\n\r\n        let move = new Move( row, col, pointsEarned );\r\n\r\n        _activePlayer.moves.push( move );\r\n\r\n        // check if next player has any moves based on board state\r\n        // no, declare victory, else continue\r\n        let potentialNextMoves = getPotentialNextMovesForNextPlayer();\r\n        console.log( \"Potential Next Moves: \", potentialNextMoves );\r\n        let highestScoringNextMove = potentialNextMoves.sort( function ( c1, c2 ) {\r\n            return c2.pointValue - c1.pointValue;\r\n        } )[0];\r\n\r\n        highestScoringNextMove.isHighestScoring = true;\r\n\r\n        //if ( gameOver ) {\r\n        //    // announce verdict\r\n        //    console.log(\"GAME OVER\");\r\n        //} else if ( nextPlayerHasMove ) {\r\n        //    updateActivePlayer( otherPlayerNumber );\r\n        //    // change active player in UI\r\n        //    console.log( \"It's now player %d's turn\", otherPlayerNumber );\r\n        //} else if ( currentPlayerHasMove ) {\r\n        //    // update UI with status\r\n        //    console.log( \"It's still player %d's turn\", otherPlayerNumber );\r\n        //}\r\n\r\n        updateActivePlayer( otherPlayerNumber );\r\n        renderGameBoard();\r\n        updateScoreBoards( _players );\r\n        _scoreKeeper.resetMoveScoreRatings();\r\n\r\n        if ( potentialNextMoves ) {\r\n            console.log( \"It's now player %d's turn\", otherPlayerNumber );\r\n        } else {\r\n            console.log( \"No next moves for player %d\", otherPlayerNumber );\r\n        }\r\n\r\n\r\n    } );\r\n\r\n    function getPotentialNextMovesForNextPlayer() {\r\n        let flatGamBoard = _scoreKeeper.getFlatGameBoard();\r\n        flatGamBoard.forEach( function ( cell ) {\r\n            cell.potentialTarget = false;\r\n        } );\r\n\r\n        let activePlayerCells = flatGamBoard\r\n            .filter( function ( cell ) {\r\n                return cell.player === _activePlayer.number;\r\n            } );\r\n\r\n        console.log( \"Active player cells: \", activePlayerCells );\r\n\r\n        let potentialNextMoves = [];\r\n        let rows = gameBoard.rows;\r\n        let moveResult;\r\n\r\n        activePlayerCells.forEach( function ( c ) {\r\n            let above = rows[ c.row + 1 ][ c.col ];\r\n            scoreMove( above, potentialNextMoves );\r\n\r\n            let aboveRight = rows[ c.row + 1 ][ c.col + 1 ];\r\n            scoreMove( aboveRight, potentialNextMoves );\r\n\r\n            let aboveLeft = rows[ c.row + 1 ][ c.col - 1 ];\r\n            scoreMove( aboveLeft, potentialNextMoves );\r\n\r\n            let left = rows[ c.row ][ c.col - 1 ];\r\n            scoreMove( left, potentialNextMoves );\r\n\r\n            let right = rows[ c.row ][ c.col + 1 ];\r\n            scoreMove( right, potentialNextMoves );\r\n\r\n            let below = rows[ c.row - 1 ][ c.col ];\r\n            scoreMove( below, potentialNextMoves );\r\n\r\n            let belowRight = rows[ c.row - 1 ][ c.col + 1 ];\r\n            scoreMove( belowRight, potentialNextMoves );\r\n\r\n            let belowLeft = rows[ c.row - 1 ][ c.col - 1 ];\r\n            scoreMove( belowLeft, potentialNextMoves );\r\n        } );\r\n\r\n        return potentialNextMoves;\r\n    }\r\n\r\n    function moveEarnsPoints( cell ) {\r\n        let [x,  otherPlayerNumber ] = getPlayerNumbers(),\r\n            hits = _scoreKeeper.setScoreForMove( cell.col, cell.row, otherPlayerNumber ),\r\n            points = hits.length,\r\n            isHit = cell.player === 0 && points > 0;\r\n\r\n        return { isHit: isHit, points: points };\r\n    }\r\n\r\n    function scoreMove( move, potentialNextMoves ) {\r\n        let moveResult = moveEarnsPoints( move );\r\n        console.log( \"belowLeft isHit: %a points: %d\", moveResult.isHit, moveResult.points );\r\n        if ( moveResult.isHit ) {\r\n            move.potentialTarget = true;\r\n            move.pointValue = moveResult.points;\r\n\r\n            if ( potentialNextMoves.indexOf( move ) === -1 )\r\n                potentialNextMoves.push( move );\r\n        }\r\n    }\r\n\r\n    function updateActivePlayer( newPlayerNumber ) {\r\n        let playerIndex = newPlayerNumber === 1 ? 0 : 1;\r\n        _activePlayer = _players[ playerIndex ];\r\n    }\r\n\r\n    function updateScoreBoards( players ) {\r\n        players.forEach( function ( player ) {\r\n            let $playerSoreBoard = $( \".player-\" + player.number );\r\n\r\n            player.score = _scoreKeeper.getScoreForPlayer( player.number );\r\n\r\n            $( \".player-\" + player.number + \" .score\" ).html( player.score );\r\n            $( \".player-\" + player.number + \" .moves\" ).html( player.moves.length );\r\n\r\n            if ( player.number === _activePlayer.number ) {\r\n                $playerSoreBoard.addClass( \"active\" );\r\n            } else {\r\n                $playerSoreBoard.removeClass( \"active\" );\r\n            }\r\n        } );\r\n    }\r\n\r\n    function setNewGameValues() {\r\n        gameBoard.rows[ 3 ][ 3 ].player = 1;\r\n        gameBoard.rows[ 4 ][ 3 ].player = 2;\r\n        gameBoard.rows[ 3 ][ 4 ].player = 2;\r\n        gameBoard.rows[ 4 ][ 4 ].player = 1;\r\n\r\n        // mark player one potential targets\r\n        gameBoard.rows[ 2 ][ 4 ].potentialTarget = true;\r\n        gameBoard.rows[ 3 ][ 5 ].potentialTarget = true;\r\n        gameBoard.rows[ 4 ][ 2 ].potentialTarget = true;\r\n        gameBoard.rows[ 5 ][ 3 ].potentialTarget = true;\r\n    }\r\n\r\n    function getPlayerNumbers() {\r\n        let otherPlayerIndex = _activePlayer.number === 1 ? 1 : 0;\r\n        return [ _activePlayer.number, _players[ otherPlayerIndex ].number ];\r\n    }\r\n\r\n    setNewGameValues();\r\n    renderGameBoard();\r\n    updateScoreBoards( _players );\r\n\r\n\r\n    console.log( \"Empty cells: \", _scoreKeeper.getEmptyCells() );\r\n})();\r\n"],"sourceRoot":"/source/"}