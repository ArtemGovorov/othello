{"version":3,"sources":["BoardManager.js","Repository.js","ScoreKeeper.js","models.js","othello.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","BoardManager","this","value","x","y","gameBoard","isValidMove","rows","Repository","snapshots","data","snapshot","getSnapshotPattern","console","log","push","snapShots","gameboard","moves","reduce","pattern","move","player","wasHighestScoring","ScoreKeeper","boardManager","playerNumber","self","getEmptyCells","forEach","cell","setScoreForMove","col","row","_this2","hits","searchDirections","direction","concat","Array","apply","getFlatGameBoard","filter","c","rowInc","colInc","getScore","_x","_x2","_again","checkResult","undefined","r","tryGetCell","checkCell","isEmpty","isPoint","cells","valid","empty","point","score","isHighestScoring","startingX","startingY","searchAt","calculatePoints","Player","num","number","Move","points","playerId","pointValue","time","timeInMatch","Cell","potentialTarget","_slicedToArray","arr","isArray","Symbol","iterator","_arr","_n","_d","_e","_s","_i","next","done","err","renderGameBoard","html","j","$","getPotentialNextMovesForNextPlayer","flatGamBoard","_scoreKeeper","activePlayerCells","_activePlayer","potentialNextMoves","above","_boardManager","scoreMove","aboveRight","aboveLeft","left","right","below","belowRight","belowLeft","moveEarnsPoints","_getPlayerNumbers3","getPlayerNumbers","_getPlayerNumbers32","otherPlayerNumber","isHit","moveResult","indexOf","updateActivePlayer","newPlayerNumber","playerIndex","_players","updateScoreBoards","players","$playerSoreBoard","getScoreForPlayer","addClass","removeClass","setNewGameValues","potentialMoves","otherPlayerIndex","_playerOne","_playerTwo","_gameOver","_startTime","Date","_repo","_lastMoveTime","rowNum","colNum","recordTimeForMove","matchStartTime","now","recordMove","timestamp","gameCompleted","on","$cell","cellObj","isTarget","_getPlayerNumbers","_getPlayerNumbers2","activePlayerNumber","pointsEarned","h","highestScoringNextMove","sort","c1","c2","resetMoveScoreRatings"],"mappings":"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","file":"app.js","sourcesContent":["\r\nclass BoardManager {\r\n    constructor() { }\r\n\r\n    tryGetCell( x, y, gameBoard ) {\r\n        return this.isValidMove( x, y ) ?\r\n            gameBoard.rows[ y ][ x ] :\r\n            null;\r\n    }\r\n\r\n    isValidMove( x, y ) {\r\n        return ( x > -1 && y > -1 ) && ( x < 8 && y < 8 );\r\n    }\r\n}\r\n","/**\r\n * Created by Eric on 4/12/2015.\r\n */\r\n\r\nclass Repository {\r\n\r\n    constructor() {\r\n        this.snapshots = [];\r\n    }\r\n\r\n    recordMove( data ) {\r\n        let snapshot = this.getSnapshotPattern( data.gameBoard );\r\n        console.log( \"Snapshot created: \", snapshot );\r\n\r\n        this.snapshots.push( snapshot );\r\n        data.snapShots = this.snapshots;\r\n        console.log( \"Saving Data: \", data );\r\n    }\r\n\r\n    getSnapshotPattern( gameboard ) {\r\n        return gameboard.moves.reduce( ( pattern, move ) => {\r\n            return pattern + `${move.x}-${move.y}-${move.player}-${ +move.wasHighestScoring || 0},`;\r\n        }, \"\" );\r\n    }\r\n}\r\n\r\n","/**\r\n * Created by Eric on 4/5/2015.\r\n */\r\nclass ScoreKeeper {\r\n    constructor( boardManager ) {\r\n        this.boardManager = boardManager;\r\n    }\r\n\r\n    playerHasNextMove( playerNumber, gameBoard ) {\r\n        let self = this;\r\n        self.getEmptyCells( gameBoard ).forEach( ( cell ) => {\r\n            if ( self.setScoreForMove( cell.col, cell.row, playerNumber ) > 0 )\r\n                return true;\r\n        } );\r\n\r\n        return false;\r\n    }\r\n\r\n    setScoreForMove( x, y, player, gameBoard ) {\r\n        let hits = [],\r\n            searchDirections = [\r\n              \"Up\",\r\n              \"UpAndRight\",\r\n              \"Right\",\r\n              \"DownAndRight\",\r\n              \"Down\",\r\n              \"DownAndLeft\",\r\n              \"Left\", \r\n              \"UpAndLeft\"\r\n            ];\r\n\r\n        searchDirections.forEach( ( direction ) => {\r\n          hits = hits.concat( this[\"search\" + direction]( x, y, player, gameBoard ) );\r\n        } );\r\n\r\n        return hits;\r\n    }\r\n\r\n    getFlatGameBoard( gameBoard ) {\r\n        return Array.prototype.concat.apply( [], gameBoard.rows );\r\n    }\r\n\r\n    getEmptyCells( gameBoard ) {\r\n        return this.getFlatGameBoard( gameBoard ).filter( ( c ) => {\r\n            return c.player === 0;\r\n        } );\r\n    }\r\n\r\n    calculatePoints( cell, rowInc, colInc, player, gameBoard ) {\r\n        let cells = [], self = this;\r\n\r\n        function getScore( r, c ) {\r\n            if ( self.boardManager.tryGetCell( c, r, gameBoard ) === null ) {\r\n                return [];\r\n            }\r\n\r\n            let cell = gameBoard.rows[ r ][ c ],\r\n                checkResult = self.checkCell( cell, player );\r\n\r\n            if ( !checkResult.isValidMove || checkResult.isEmpty ) {\r\n                return [];\r\n            } else if ( checkResult.isPoint ) {\r\n                cells.push( cell );\r\n                return getScore( r + rowInc, c + colInc );\r\n            } else {\r\n                return cells;\r\n            }\r\n        }\r\n\r\n        return getScore( cell.row, cell.col );\r\n    }\r\n\r\n    checkCell( cell, player ) {\r\n        let valid = this.boardManager.isValidMove( cell.col, cell.row ),\r\n            empty = valid ? cell.player === 0 : false,\r\n            point = valid ? cell.player !== player && !empty : false;\r\n\r\n        return {\r\n            isValidMove: valid,\r\n            isEmpty: empty,\r\n            isPoint: point\r\n        };\r\n    }\r\n\r\n    getScoreForPlayer( playerNumber, gameBoard ) {\r\n        return this.getFlatGameBoard( gameBoard ).reduce( ( score, cell ) => {\r\n            if ( cell.player === playerNumber )\r\n                score++;\r\n\r\n            return score;\r\n        }, 0 )\r\n    }\r\n\r\n    resetMoveScoreRatings( gameBoard ) {\r\n        this.getFlatGameBoard( gameBoard ).forEach( ( cell ) => {\r\n            cell.isHighestScoring = false;\r\n        } );\r\n\r\n        return gameBoard;\r\n    }\r\n\r\n    searchRight( startingX, startingY, player, gameBoard ) {\r\n        return this.searchAt( startingX, startingY, 0, 1, player, gameBoard );\r\n    }\r\n\r\n    searchLeft( startingX, startingY, player, gameBoard ) {\r\n        return this.searchAt( startingX, startingY, 0, -1, player, gameBoard );\r\n    }\r\n\r\n    searchUp( startingX, startingY, player, gameBoard ) {\r\n        return this.searchAt( startingX, startingY, -1, 0, player, gameBoard );\r\n    }\r\n\r\n    searchDown( startingX, startingY, player, gameBoard ) {\r\n        return this.searchAt( startingX, startingY, 1, 0, player, gameBoard );\r\n    }\r\n\r\n    searchUpAndRight( startingX, startingY, player, gameBoard ) {\r\n        return this.searchAt( startingX, startingY, -1, 1, player, gameBoard );\r\n    }\r\n\r\n    searchUpAndLeft( startingX, startingY, player, gameBoard ) {\r\n        return this.searchAt( startingX, startingY, -1, -1, player, gameBoard );\r\n    }\r\n\r\n    searchDownAndRight( startingX, startingY, player, gameBoard ) {\r\n        return this.searchAt( startingX, startingY, 1, 1, player, gameBoard );\r\n    }\r\n\r\n    searchDownAndLeft( startingX, startingY, player, gameBoard ) {\r\n        return this.searchAt( startingX, startingY, 1, -1, player, gameBoard );\r\n    }\r\n\r\n    searchAt( x, y, rowInc, colInc, player, gameBoard ) {\r\n        let cell = this.boardManager.tryGetCell(  x + colInc , y + rowInc , gameBoard );\r\n        return cell !== null ?\r\n            this.calculatePoints( cell, rowInc, colInc, player, gameBoard ) : [];\r\n    }\r\n\r\n\r\n}\r\n","/**\r\n * Created by Eric on 4/4/2015.\r\n */\r\n\r\nclass Player {\r\n    constructor ( num ) {\r\n        this.number = num;\r\n        this.score = 2;\r\n        this.moves = [];\r\n    }\r\n}\r\n\r\nclass Move {\r\n    constructor ( row, col, points, playerId, isHighestScoring ) {\r\n        this.x = col;\r\n        this.y = row;\r\n        this.pointValue = points;\r\n        this.player = playerId;\r\n        this.time = 0;\r\n        this.timeInMatch = 0;\r\n        this.wasHighestScoring = isHighestScoring;\r\n    }\r\n}\r\n\r\nclass Cell {\r\n    constructor( row, col ) {\r\n        this.row = row;\r\n        this.col = col;\r\n        this.player = 0;\r\n        this.potentialTarget = false;\r\n    }\r\n}\r\n","\r\n/**\r\n * Created by Eric on 4/4/2015.\r\n */\r\n\r\n(() => {\r\n    let gameBoard = {\r\n            rows: [],\r\n            moves: []\r\n        },\r\n        _playerOne = new Player( 1 ),\r\n        _playerTwo = new Player( 2 ),\r\n        _activePlayer = _playerOne,\r\n        _players = [ _playerOne, _playerTwo ],\r\n        _scoreKeeper, _gameOver = false,\r\n        _startTime = new Date(),\r\n        _repo = new Repository(),\r\n        _boardManager = new BoardManager(),\r\n        _lastMoveTime = new Date();\r\n\r\n    const rowNum = 8;\r\n    const colNum = 8;\r\n\r\n    for ( let i = 0; i < rowNum; i++ ) {\r\n        let row = [];\r\n        for ( let j = 0; j < colNum; j++ ) {\r\n            row.push( new Cell( i, j ) );\r\n        }\r\n        gameBoard.rows.push( row );\r\n    }\r\n\r\n    _scoreKeeper = new ScoreKeeper( _boardManager );\r\n\r\n    function renderGameBoard() {\r\n        let html = '';\r\n\r\n        gameBoard.rows.forEach( ( row, i ) => {\r\n            row.forEach( ( cell, j ) => {\r\n                html += `<div class='cell' data-target=\"${cell.potentialTarget}\" data-is-highest-scoring-move=\"${cell.isHighestScoring}\" data-player-num=\"${cell.player}\" data-row-num='${i}' data-col-num='${j}'>${cell.player}</div>`;\r\n            } );\r\n        } );\r\n\r\n        $( \".game-board\" ).html( html );\r\n    }\r\n\r\n    var recordTimeForMove = function ( move, matchStartTime ) {\r\n        let now = new Date();\r\n\r\n        move.time = now - _lastMoveTime;\r\n        move.timeInMatch = now - matchStartTime;\r\n        _lastMoveTime = now;\r\n\r\n        _repo.recordMove( {\r\n            players: _players,\r\n            gameBoard: gameBoard,\r\n            timestamp: now - matchStartTime,\r\n            gameCompleted: _gameOver\r\n        } );\r\n    };\r\n\r\n    $( \".game-board\" ).on( \"click\", \".cell\", function () {\r\n        let $cell = $( this );\r\n        let row = +$cell.data( \"row-num\" );\r\n        let col = +$cell.data( \"col-num\" );\r\n        let player = +$cell.data( \"player-num\" );\r\n        let isHighestScoring = $cell.data(\"is-highest-scoring-move\");\r\n        let cellObj = gameBoard.rows[ row ][ col ];\r\n        let isTarget = $cell.data( \"target\" );\r\n        let [ activePlayerNumber, otherPlayerNumber ] = getPlayerNumbers();\r\n\r\n        if ( !isTarget )\r\n            return;\r\n\r\n        // calculate points and set cell values\r\n        let hits = _scoreKeeper.setScoreForMove( col, row, activePlayerNumber, gameBoard );\r\n        let pointsEarned = hits.length;\r\n\r\n        if ( pointsEarned === 0 )\r\n            return;\r\n\r\n        let move = new Move( row, col, pointsEarned, activePlayerNumber, isHighestScoring );\r\n        gameBoard.moves.push( move );\r\n\r\n        cellObj.player = activePlayerNumber;\r\n\r\n        hits.forEach( function ( h ) {\r\n            h.player = activePlayerNumber\r\n        } );\r\n\r\n        recordTimeForMove( move, _startTime );\r\n\r\n        // check if next player has any moves based on board state\r\n        // no, declare victory, else continue\r\n        let potentialNextMoves = getPotentialNextMovesForNextPlayer();\r\n        console.log( \"Potential Next Moves: \", potentialNextMoves );\r\n        let highestScoringNextMove = potentialNextMoves.sort( ( c1, c2 ) => {\r\n            return c2.pointValue - c1.pointValue;\r\n        } )[ 0 ];\r\n\r\n        highestScoringNextMove.isHighestScoring = true;\r\n\r\n        //if ( gameOver ) {\r\n        //    // announce verdict\r\n        //    console.log(\"GAME OVER\");\r\n        //} else if ( nextPlayerHasMove ) {\r\n        //    updateActivePlayer( otherPlayerNumber );\r\n        //    // change active player in UI\r\n        //    console.log( \"It's now player %d's turn\", otherPlayerNumber );\r\n        //} else if ( currentPlayerHasMove ) {\r\n        //    // update UI with status\r\n        //    console.log( \"It's still player %d's turn\", otherPlayerNumber );\r\n        //}\r\n\r\n        updateActivePlayer( otherPlayerNumber );\r\n        renderGameBoard();\r\n        updateScoreBoards( _players );\r\n        _scoreKeeper.resetMoveScoreRatings( gameBoard );\r\n\r\n        if ( potentialNextMoves ) {\r\n            console.log( \"It's now player %d's turn\", otherPlayerNumber );\r\n        } else {\r\n            console.log( \"No next moves for player %d\", otherPlayerNumber );\r\n        }\r\n\r\n\r\n    } );\r\n\r\n    function getPotentialNextMovesForNextPlayer() {\r\n        let flatGamBoard = _scoreKeeper.getFlatGameBoard( gameBoard );\r\n        flatGamBoard.forEach( ( cell ) => {\r\n            cell.potentialTarget = false;\r\n        } );\r\n\r\n        let activePlayerCells = flatGamBoard\r\n            .filter( ( cell ) => {\r\n                return cell.player === _activePlayer.number;\r\n            } );\r\n\r\n        let potentialNextMoves = [];\r\n\r\n        activePlayerCells.forEach( function ( c ) {\r\n            let above = _boardManager.tryGetCell( c.col, c.row - 1, gameBoard );\r\n            scoreMove( above, potentialNextMoves );\r\n\r\n            let aboveRight = _boardManager.tryGetCell( c.col + 1, c.row - 1, gameBoard );\r\n            scoreMove( aboveRight, potentialNextMoves );\r\n\r\n            let aboveLeft = _boardManager.tryGetCell( c.col - 1, c.row - 1, gameBoard );\r\n            scoreMove( aboveLeft, potentialNextMoves );\r\n\r\n            let left = _boardManager.tryGetCell( c.col - 1, c.row, gameBoard );\r\n            scoreMove( left, potentialNextMoves );\r\n\r\n            let right = _boardManager.tryGetCell( c.col + 1, c.row, gameBoard );\r\n            scoreMove( right, potentialNextMoves );\r\n\r\n            let below = _boardManager.tryGetCell( c.col, c.row + 1, gameBoard );\r\n            scoreMove( below, potentialNextMoves );\r\n\r\n            let belowRight = _boardManager.tryGetCell( c.col + 1, c.row + 1, gameBoard );\r\n            scoreMove( belowRight, potentialNextMoves );\r\n\r\n            let belowLeft = _boardManager.tryGetCell( c.col - 1, c.row + 1, gameBoard );\r\n            scoreMove( belowLeft, potentialNextMoves );\r\n        } );\r\n\r\n        return potentialNextMoves;\r\n    }\r\n\r\n    function moveEarnsPoints( cell ) {\r\n        let [x,  otherPlayerNumber ] = getPlayerNumbers(),\r\n            hits = _scoreKeeper.setScoreForMove( cell.col, cell.row, otherPlayerNumber, gameBoard ),\r\n            points = hits.length,\r\n            isHit = cell.player === 0 && points > 0;\r\n\r\n        return { isHit: isHit, points: points };\r\n    }\r\n\r\n    function scoreMove( move, potentialNextMoves ) {\r\n        if ( move === null ) return;\r\n\r\n        let moveResult = moveEarnsPoints( move );\r\n       // console.log( \"isHit: %d %d points: %d\", move.row, move.col, moveResult.points );\r\n        if ( moveResult.isHit ) {\r\n            move.potentialTarget = true;\r\n            move.pointValue = moveResult.points;\r\n\r\n            if ( potentialNextMoves.indexOf( move ) === -1 )\r\n                potentialNextMoves.push( move );\r\n        }\r\n    }\r\n\r\n    function updateActivePlayer( newPlayerNumber ) {\r\n        let playerIndex = newPlayerNumber === 1 ? 0 : 1;\r\n        _activePlayer = _players[ playerIndex ];\r\n    }\r\n\r\n    function updateScoreBoards( players ) {\r\n        players.forEach( function ( player ) {\r\n            let $playerSoreBoard = $( \".player-\" + player.number );\r\n\r\n            player.score = _scoreKeeper.getScoreForPlayer( player.number, gameBoard );\r\n\r\n            $( \".player-\" + player.number + \" .score\" ).html( player.score );\r\n            $( \".player-\" + player.number + \" .moves\" ).html( player.moves.length );\r\n\r\n            if ( player.number === _activePlayer.number ) {\r\n                $playerSoreBoard.addClass( \"active\" );\r\n            } else {\r\n                $playerSoreBoard.removeClass( \"active\" );\r\n            }\r\n        } );\r\n    }\r\n\r\n    function setNewGameValues() {\r\n        gameBoard.rows[ 3 ][ 3 ].player = 1;\r\n        gameBoard.rows[ 4 ][ 3 ].player = 2;\r\n        gameBoard.rows[ 3 ][ 4 ].player = 2;\r\n        gameBoard.rows[ 4 ][ 4 ].player = 1;\r\n\r\n        // mark player one potential targets\r\n        let potentialMoves = [\r\n            gameBoard.rows[ 2 ][ 4 ],\r\n            gameBoard.rows[ 3 ][ 5 ],\r\n            gameBoard.rows[ 4 ][ 2 ],\r\n            gameBoard.rows[ 5 ][ 3 ]\r\n        ];\r\n\r\n        potentialMoves.forEach( function ( cell ) {\r\n            cell.potentialTarget = true;\r\n        } );\r\n    }\r\n\r\n    function getPlayerNumbers() {\r\n        let otherPlayerIndex = _activePlayer.number === 1 ? 1 : 0;\r\n        return [ _activePlayer.number, _players[ otherPlayerIndex ].number ];\r\n    }\r\n\r\n    setNewGameValues();\r\n    renderGameBoard();\r\n    updateScoreBoards( _players );\r\n\r\n\r\n    console.log( \"Empty cells: \", _scoreKeeper.getEmptyCells( gameBoard ) );\r\n})();\r\n"],"sourceRoot":"/source/"}