{"version":3,"sources":["ScoreKeeper.js","models.js","othello.js"],"names":["_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","TypeError","_classCallCheck","instance","Constructor","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","key","protoProps","staticProps","prototype","ScoreKeeper","gameBoard","this","numRows","rows","numCols","playerNumber","self","getEmptyCells","forEach","cell","setScoreForMove","col","row","x","y","player","hits","concat","searchUp","searchUpAndRight","searchRight","searchDownAndRight","searchDown","searchDownAndLeft","searchLeft","searchUpAndLeft","console","log","apply","getFlatGameBoard","filter","c","rowInc","colInc","getScore","_x","_x2","_again","_self$checkCell","_self$checkCell2","reachedEdge","isEmpty","isPoint","r","checkCell","cells","hasReachedEdge","isEmptyCell","reduce","score","isHighestScoring","startingX","startingY","calculatePoints","Player","num","number","moves","Move","points","pointValue","Cell","potentialTarget","renderGameBoard","html","j","$","getPotentialNextMovesForNextPlayer","flatGamBoard","_scoreKeeper","activePlayerCells","_activePlayer","potentialNextMoves","above","scoreMove","aboveRight","aboveLeft","left","right","below","belowRight","belowLeft","moveEarnsPoints","_getPlayerNumbers3","getPlayerNumbers","_getPlayerNumbers32","otherPlayerNumber","isHit","move","moveResult","indexOf","updateActivePlayer","newPlayerNumber","playerIndex","_players","updateScoreBoards","players","$playerSoreBoard","getScoreForPlayer","addClass","removeClass","setNewGameValues","otherPlayerIndex","_playerOne","_playerTwo","rowNum","colNum","on","$cell","data","cellObj","isTarget","_getPlayerNumbers","_getPlayerNumbers2","activePlayerNumber","pointsEarned","h","highestScoringNextMove","sort","c1","c2","resetMoveScoreRatings"],"mappings":"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","file":"app.js","sourcesContent":["/**\r\n * Created by Eric on 4/5/2015.\r\n */\r\nclass ScoreKeeper {\r\n    constructor( gameBoard ) {\r\n        this.gameBoard = gameBoard;\r\n        this.numRows = gameBoard.rows.length;\r\n        this.numCols = gameBoard.rows[0].length;\r\n    }\r\n\r\n    playerHasNextMove( playerNumber ) {\r\n        let self = this;\r\n        self.getEmptyCells().forEach( function ( cell ) {\r\n            if ( self.setScoreForMove( cell.col, cell.row, playerNumber ) > 0 ) {\r\n                return true;\r\n            }\r\n        } );\r\n\r\n        return false;\r\n    }\r\n\r\n\r\n    setScoreForMove( x, y, player ) {\r\n        let hits = [];\r\n\r\n        hits = hits.concat( this.searchUp( x, y, player ) );\r\n        hits = hits.concat( this.searchUpAndRight( x, y, player  ));\r\n        hits = hits.concat( this.searchRight( x, y, player ));\r\n        hits = hits.concat( this.searchDownAndRight( x, y, player ));\r\n        hits = hits.concat( this.searchDown( x, y, player ));\r\n        hits = hits.concat( this.searchDownAndLeft( x, y, player ));\r\n        hits = hits.concat( this.searchLeft( x, y, player ));\r\n        hits = hits.concat( this.searchUpAndLeft( x, y, player ));\r\n\r\n        console.log( \"POINTS EARNED: %d\", hits.length );\r\n        console.log( \"HITS: \", hits );\r\n        return hits;\r\n    }\r\n\r\n    getFlatGameBoard() {\r\n        return Array.prototype.concat.apply( [], this.gameBoard.rows );\r\n    }\r\n\r\n    getEmptyCells() {\r\n        return this.getFlatGameBoard().filter( function ( c ) {\r\n            return c.player === 0;\r\n        } );\r\n    }\r\n\r\n    calculatePoints( row, col, rowInc, colInc, player ) {\r\n        let cells = [], self = this;\r\n\r\n        if ( row === -1 || col === -1 || row === 8 || col === 8 ) {\r\n            return [];\r\n        }\r\n\r\n        function getScore( r, c ) {\r\n            let [ reachedEdge, isEmpty, isPoint, cell ] = self.checkCell( r, c, player );\r\n\r\n            if ( reachedEdge || isEmpty ) {\r\n                return [];\r\n            } else if ( isPoint ) {\r\n                console.log(\"HIT! \", cell);\r\n                cells.push( cell );\r\n                return getScore( r + rowInc, c + colInc );\r\n            } else {\r\n                console.log(\"Returning cells: \", cells);\r\n                return cells;\r\n            }\r\n        }\r\n\r\n        return getScore( row, col );\r\n    }\r\n\r\n    checkCell( row, col, player ) {\r\n        let hasReachedEdge = ( row === this.numRows - 1 || col === this.numCols - 1 ),\r\n            cell = this.gameBoard.rows[ row ][ col ],\r\n            isEmptyCell = cell.player === 0,\r\n            isPoint = cell.player !== player && !isEmptyCell;\r\n\r\n        return [ hasReachedEdge, isEmptyCell, isPoint, cell ];\r\n    }\r\n\r\n    getScoreForPlayer( playerNumber ) {\r\n        return this.getFlatGameBoard().reduce(function ( score, cell) {\r\n            if ( cell.player === playerNumber ) {\r\n                score++;\r\n            }\r\n            return score;\r\n        }, 0)\r\n    }\r\n\r\n    resetMoveScoreRatings( ) {\r\n        this.getFlatGameBoard().forEach( function ( cell ) {\r\n            cell.isHighestScoring = false;\r\n        } );\r\n    }\r\n\r\n    searchRight( startingX, startingY, player ) {\r\n        return this.calculatePoints( startingY, startingX + 1, 0, 1, player );\r\n    }\r\n\r\n    searchLeft( startingX, startingY, player ) {\r\n        return this.calculatePoints( startingY, startingX - 1, 0, -1, player );\r\n    }\r\n\r\n    searchUp( startingX, startingY, player ) {\r\n        return this.calculatePoints( startingY + 1, startingX, 1, 0, player );\r\n    }\r\n\r\n    searchDown( startingX, startingY, player ) {\r\n        return this.calculatePoints( startingY - 1, startingX, -1, 0, player );\r\n    }\r\n\r\n    searchUpAndRight( startingX, startingY, player ) {\r\n        return this.calculatePoints( startingY + 1, startingX + 1, 1, 1, player );\r\n    }\r\n\r\n    searchUpAndLeft( startingX, startingY, player ) {\r\n        return this.calculatePoints( startingY + 1, startingX - 1, 1, -1, player );\r\n    }\r\n\r\n    searchDownAndRight( startingX, startingY, player ) {\r\n        return this.calculatePoints( startingY - 1, startingX + 1, -1, 1, player );\r\n    }\r\n\r\n    searchDownAndLeft( startingX, startingY, player ) {\r\n        return this.calculatePoints( startingY - 1, startingX - 1, -1, -1, player );\r\n    }\r\n}","/**\r\n * Created by Eric on 4/4/2015.\r\n */\r\n\r\nclass Player {\r\n    constructor ( num ) {\r\n        this.number = num;\r\n        this.score = 2;\r\n        this.moves = [];\r\n    }\r\n}\r\n\r\nclass Move {\r\n    constructor ( row, col, points ) {\r\n        this.x = col;\r\n        this.y = row;\r\n        this.pointValue = points;\r\n    }\r\n}\r\n\r\nclass Cell {\r\n    constructor( row, col ) {\r\n        this.row = row;\r\n        this.col = col;\r\n        this.player = 0;\r\n        this.potentialTarget = false;\r\n    }\r\n}\r\n\r\n","/**\r\n * Created by Eric on 4/4/2015.\r\n */\r\n\r\n(() => {\r\n    let gameBoard = {\r\n            rows: []\r\n        },\r\n        _playerOne = new Player( 1 ),\r\n        _playerTwo = new Player( 2 ),\r\n        _activePlayer = _playerOne,\r\n        _players = [ _playerOne, _playerTwo ],\r\n        _scoreKeeper;\r\n\r\n    const rowNum = 8;\r\n    const colNum = 8;\r\n\r\n    for ( let i = 0; i < rowNum; i++ ) {\r\n        let row = [];\r\n        for ( let j = 0; j < colNum; j++ ) {\r\n            row.push( new Cell( i, j ) );\r\n        }\r\n        gameBoard.rows.push( row );\r\n    }\r\n\r\n    _scoreKeeper = new ScoreKeeper( gameBoard );\r\n\r\n    function renderGameBoard() {\r\n        console.log( \"Gameboard: \", gameBoard );\r\n        let html = '';\r\n        gameBoard.rows.forEach( function ( row, i ) {\r\n            row.forEach( function ( cell, j ) {\r\n                html += `<div class='cell' data-target=\"${cell.potentialTarget}\" data-is-highest-sciring-move=\"${cell.isHighestScoring}\" data-player-num=\"${cell.player}\" data-row-num='${i}' data-col-num='${j}'>${cell.player}</div>`;\r\n            } );\r\n\r\n        } );\r\n\r\n        $( \".game-board\" ).html( html );\r\n    }\r\n\r\n    $( \".game-board\" ).on( \"click\", \".cell\", function () {\r\n        let $cell = $( this );\r\n        let row = +$cell.data( \"row-num\" );\r\n        let col = +$cell.data( \"col-num\" );\r\n        let player = +$cell.data( \"player-num\" );\r\n        let cellObj = gameBoard.rows[ row ][ col ];\r\n        let isTarget = $cell.data( \"target\" );\r\n        let [ activePlayerNumber, otherPlayerNumber ] = getPlayerNumbers();\r\n\r\n        // calculate points and set cell values\r\n        let hits = _scoreKeeper.setScoreForMove( col, row, activePlayerNumber );\r\n        let pointsEarned = hits.length;\r\n\r\n        if ( !isTarget || pointsEarned === 0 )\r\n            return;\r\n\r\n        cellObj.player = activePlayerNumber;\r\n        hits.forEach( function ( h ) {\r\n            h.player = activePlayerNumber\r\n        } );\r\n\r\n        let move = new Move( row, col, pointsEarned );\r\n\r\n        _activePlayer.moves.push( move );\r\n\r\n        // check if next player has any moves based on board state\r\n        // no, declare victory, else continue\r\n        let potentialNextMoves = getPotentialNextMovesForNextPlayer();\r\n        console.log( \"Potential Next Moves: \", potentialNextMoves );\r\n        let highestScoringNextMove = potentialNextMoves.sort( function ( c1, c2 ) {\r\n            return c2.pointValue - c1.pointValue;\r\n        } )[0];\r\n\r\n        highestScoringNextMove.isHighestScoring = true;\r\n\r\n        //if ( gameOver ) {\r\n        //    // announce verdict\r\n        //    console.log(\"GAME OVER\");\r\n        //} else if ( nextPlayerHasMove ) {\r\n        //    updateActivePlayer( otherPlayerNumber );\r\n        //    // change active player in UI\r\n        //    console.log( \"It's now player %d's turn\", otherPlayerNumber );\r\n        //} else if ( currentPlayerHasMove ) {\r\n        //    // update UI with status\r\n        //    console.log( \"It's still player %d's turn\", otherPlayerNumber );\r\n        //}\r\n\r\n        updateActivePlayer( otherPlayerNumber );\r\n        renderGameBoard();\r\n        updateScoreBoards( _players );\r\n        _scoreKeeper.resetMoveScoreRatings();\r\n\r\n        if ( potentialNextMoves ) {\r\n            console.log( \"It's now player %d's turn\", otherPlayerNumber );\r\n        } else {\r\n            console.log( \"No next moves for player %d\", otherPlayerNumber );\r\n        }\r\n\r\n\r\n    } );\r\n\r\n    function getPotentialNextMovesForNextPlayer() {\r\n        let flatGamBoard = _scoreKeeper.getFlatGameBoard();\r\n        flatGamBoard.forEach( function ( cell ) {\r\n            cell.potentialTarget = false;\r\n        } );\r\n\r\n        let activePlayerCells = flatGamBoard\r\n            .filter( function ( cell ) {\r\n                return cell.player === _activePlayer.number;\r\n            } );\r\n\r\n        console.log( \"Active player cells: \", activePlayerCells );\r\n\r\n        let potentialNextMoves = [];\r\n        let rows = gameBoard.rows;\r\n        let moveResult;\r\n\r\n        activePlayerCells.forEach( function ( c ) {\r\n            let above = rows[ c.row + 1 ][ c.col ];\r\n            scoreMove( above, potentialNextMoves );\r\n\r\n            let aboveRight = rows[ c.row + 1 ][ c.col + 1 ];\r\n            scoreMove( aboveRight, potentialNextMoves );\r\n\r\n            let aboveLeft = rows[ c.row + 1 ][ c.col - 1 ];\r\n            scoreMove( aboveLeft, potentialNextMoves );\r\n\r\n            let left = rows[ c.row ][ c.col - 1 ];\r\n            scoreMove( left, potentialNextMoves );\r\n\r\n            let right = rows[ c.row ][ c.col + 1 ];\r\n            scoreMove( right, potentialNextMoves );\r\n\r\n            let below = rows[ c.row - 1 ][ c.col ];\r\n            scoreMove( below, potentialNextMoves );\r\n\r\n            let belowRight = rows[ c.row - 1 ][ c.col + 1 ];\r\n            scoreMove( belowRight, potentialNextMoves );\r\n\r\n            let belowLeft = rows[ c.row - 1 ][ c.col - 1 ];\r\n            scoreMove( belowLeft, potentialNextMoves );\r\n        } );\r\n\r\n        return potentialNextMoves;\r\n    }\r\n\r\n    function moveEarnsPoints( cell ) {\r\n        let [x,  otherPlayerNumber ] = getPlayerNumbers(),\r\n            hits = _scoreKeeper.setScoreForMove( cell.col, cell.row, otherPlayerNumber ),\r\n            points = hits.length,\r\n            isHit = cell.player === 0 && points > 0;\r\n\r\n        return { isHit: isHit, points: points };\r\n    }\r\n\r\n    function scoreMove( move, potentialNextMoves ) {\r\n        let moveResult = moveEarnsPoints( move );\r\n        console.log( \"belowLeft isHit: %a points: %d\", moveResult.isHit, moveResult.points );\r\n        if ( moveResult.isHit ) {\r\n            move.potentialTarget = true;\r\n            move.pointValue = moveResult.points;\r\n\r\n            if ( potentialNextMoves.indexOf( move ) === -1 )\r\n                potentialNextMoves.push( move );\r\n        }\r\n    }\r\n\r\n    function updateActivePlayer( newPlayerNumber ) {\r\n        let playerIndex = newPlayerNumber === 1 ? 0 : 1;\r\n        _activePlayer = _players[ playerIndex ];\r\n    }\r\n\r\n    function updateScoreBoards( players ) {\r\n        players.forEach( function ( player ) {\r\n            let $playerSoreBoard = $( \".player-\" + player.number );\r\n\r\n            player.score = _scoreKeeper.getScoreForPlayer( player.number );\r\n\r\n            $( \".player-\" + player.number + \" .score\" ).html( player.score );\r\n            $( \".player-\" + player.number + \" .moves\" ).html( player.moves.length );\r\n\r\n            if ( player.number === _activePlayer.number ) {\r\n                $playerSoreBoard.addClass( \"active\" );\r\n            } else {\r\n                $playerSoreBoard.removeClass( \"active\" );\r\n            }\r\n        } );\r\n    }\r\n\r\n    function setNewGameValues() {\r\n        gameBoard.rows[ 3 ][ 3 ].player = 1;\r\n        gameBoard.rows[ 4 ][ 3 ].player = 2;\r\n        gameBoard.rows[ 3 ][ 4 ].player = 2;\r\n        gameBoard.rows[ 4 ][ 4 ].player = 1;\r\n\r\n        // mark player one potential targets\r\n        gameBoard.rows[ 2 ][ 4 ].potentialTarget = true;\r\n        gameBoard.rows[ 3 ][ 5 ].potentialTarget = true;\r\n        gameBoard.rows[ 4 ][ 2 ].potentialTarget = true;\r\n        gameBoard.rows[ 5 ][ 3 ].potentialTarget = true;\r\n    }\r\n\r\n    function getPlayerNumbers() {\r\n        let otherPlayerIndex = _activePlayer.number === 1 ? 1 : 0;\r\n        return [ _activePlayer.number, _players[ otherPlayerIndex ].number ];\r\n    }\r\n\r\n    setNewGameValues();\r\n    renderGameBoard();\r\n    updateScoreBoards( _players );\r\n\r\n\r\n    console.log( \"Empty cells: \", _scoreKeeper.getEmptyCells() );\r\n})();\r\n"],"sourceRoot":"/source/"}