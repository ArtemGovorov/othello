{"version":3,"sources":["BoardManager.js","Repository.js","ScoreKeeper.js","models.js","othello.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","BoardManager","this","value","x","y","gameBoard","isValidMove","rows","Repository","snapshots","data","snapshot","getSnapshotPattern","console","log","push","snapShots","gameboard","moves","reduce","pattern","move","player","wasHighestScoring","ScoreKeeper","playerNumber","self","getEmptyCells","forEach","cell","setScoreForMove","col","row","_this2","hits","searchDirections","direction","concat","Array","apply","getFlatGameBoard","filter","c","rowInc","colInc","getScore","_x","_x2","_again","checkResult","undefined","r","tryGetCell","checkCell","isEmpty","isPoint","cells","valid","empty","point","score","isHighestScoring","startingX","startingY","searchAt","calculatePoints","Player","num","number","Move","points","playerId","pointValue","time","timeInMatch","Cell","potentialTarget","_slicedToArray","arr","isArray","Symbol","iterator","_arr","_n","_d","_e","_s","_i","next","done","err","renderGameBoard","html","j","$","getPotentialNextMovesForNextPlayer","flatGamBoard","_scoreKeeper","activePlayerCells","_activePlayer","potentialNextMoves","above","scoreMove","aboveRight","aboveLeft","left","right","below","belowRight","belowLeft","moveEarnsPoints","_getPlayerNumbers3","getPlayerNumbers","_getPlayerNumbers32","otherPlayerNumber","isHit","moveResult","indexOf","updateActivePlayer","newPlayerNumber","playerIndex","_players","updateScoreBoards","players","$playerSoreBoard","getScoreForPlayer","addClass","removeClass","setNewGameValues","potentialMoves","otherPlayerIndex","_playerOne","_playerTwo","_gameOver","_startTime","Date","_repo","_lastMoveTime","rowNum","colNum","recordTimeForMove","matchStartTime","now","recordMove","timestamp","gameCompleted","on","$cell","cellObj","isTarget","_getPlayerNumbers","_getPlayerNumbers2","activePlayerNumber","pointsEarned","h","highestScoringNextMove","sort","c1","c2","resetMoveScoreRatings"],"mappings":"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","file":"app.js","sourcesContent":["/**\r\n * Created by Eric on 4/9/2015.\r\n */\r\n\r\nclass BoardManager {\r\n    constructor() { }\r\n\r\n    tryGetCell( x, y, gameBoard ) {\r\n        return this.isValidMove( x, y ) ?\r\n            gameBoard.rows[ y ][ x ] :\r\n            null;\r\n    }\r\n\r\n    isValidMove( x, y ) {\r\n        return ( x > -1 && y > -1 ) && ( x < 8 && y < 8 );\r\n    }\r\n}\r\n","/**\r\n * Created by Eric on 4/12/2015.\r\n */\r\n\r\nclass Repository {\r\n\r\n    constructor() {\r\n        this.snapshots = [];\r\n    }\r\n\r\n    recordMove( data ) {\r\n        let snapshot = this.getSnapshotPattern( data.gameBoard );\r\n        console.log( \"Snapshot created: \", snapshot );\r\n\r\n        this.snapshots.push( snapshot );\r\n        data.snapShots = this.snapshots;\r\n        console.log( \"Saving Data: \", data );\r\n    }\r\n\r\n    getSnapshotPattern( gameboard ) {\r\n        return gameboard.moves.reduce( ( pattern, move ) => {\r\n            return pattern + `${move.x}-${move.y}-${move.player}-${ +move.wasHighestScoring || 0},`;\r\n        }, \"\" );\r\n    }\r\n}\r\n\r\n","/**\r\n * Created by Eric on 4/5/2015.\r\n */\r\nclass ScoreKeeper {\r\n    constructor() { }\r\n\r\n    playerHasNextMove( playerNumber, gameBoard ) {\r\n        let self = this;\r\n        self.getEmptyCells( gameBoard ).forEach( ( cell ) => {\r\n            if ( self.setScoreForMove( cell.col, cell.row, playerNumber ) > 0 )\r\n                return true;\r\n        } );\r\n\r\n        return false;\r\n    }\r\n\r\n    setScoreForMove( x, y, player, gameBoard ) {\r\n        let hits = [],\r\n            searchDirections = [\r\n              \"Up\",\r\n              \"UpAndRight\",\r\n              \"Right\",\r\n              \"DownAndRight\",\r\n              \"Down\",\r\n              \"DownAndLeft\",\r\n              \"Left\", \r\n              \"UpAndLeft\"\r\n            ];\r\n\r\n        searchDirections.forEach( ( direction ) => {\r\n          hits = hits.concat( this[\"search\" + direction]( x, y, player, gameBoard ) );\r\n        } );\r\n\r\n        return hits;\r\n    }\r\n\r\n    getFlatGameBoard( gameBoard ) {\r\n        return Array.prototype.concat.apply( [], gameBoard.rows );\r\n    }\r\n\r\n    getEmptyCells( gameBoard ) {\r\n        return this.getFlatGameBoard( gameBoard ).filter( ( c ) => {\r\n            return c.player === 0;\r\n        } );\r\n    }\r\n\r\n    calculatePoints( cell, rowInc, colInc, player, gameBoard ) {\r\n        let cells = [], self = this;\r\n\r\n        function getScore( r, c ) {\r\n            if ( BoardManager.tryGetCell( c, r, gameBoard ) === null ) {\r\n                return [];\r\n            }\r\n\r\n            let cell = gameBoard.rows[ r ][ c ],\r\n                checkResult = self.checkCell( cell, player );\r\n\r\n            if ( !checkResult.isValidMove || checkResult.isEmpty ) {\r\n                return [];\r\n            } else if ( checkResult.isPoint ) {\r\n                cells.push( cell );\r\n                return getScore( r + rowInc, c + colInc );\r\n            } else {\r\n                return cells;\r\n            }\r\n        }\r\n\r\n        return getScore( cell.row, cell.col );\r\n    }\r\n\r\n    checkCell( cell, player ) {\r\n        let valid = BoardManager.isValidMove( cell.col, cell.row ),\r\n            empty = valid ? cell.player === 0 : false,\r\n            point = valid ? cell.player !== player && !empty : false;\r\n\r\n        return {\r\n            isValidMove: valid,\r\n            isEmpty: empty,\r\n            isPoint: point\r\n        };\r\n    }\r\n\r\n    getScoreForPlayer( playerNumber, gameBoard ) {\r\n        return this.getFlatGameBoard( gameBoard ).reduce( ( score, cell ) => {\r\n            if ( cell.player === playerNumber )\r\n                score++;\r\n\r\n            return score;\r\n        }, 0 )\r\n    }\r\n\r\n    resetMoveScoreRatings( gameBoard ) {\r\n        this.getFlatGameBoard( gameBoard ).forEach( ( cell ) => {\r\n            cell.isHighestScoring = false;\r\n        } );\r\n\r\n        return gameBoard;\r\n    }\r\n\r\n    searchRight( startingX, startingY, player, gameBoard ) {\r\n        return this.searchAt( startingX, startingY, 0, 1, player, gameBoard );\r\n    }\r\n\r\n    searchLeft( startingX, startingY, player, gameBoard ) {\r\n        return this.searchAt( startingX, startingY, 0, -1, player, gameBoard );\r\n    }\r\n\r\n    searchUp( startingX, startingY, player, gameBoard ) {\r\n        return this.searchAt( startingX, startingY, -1, 0, player, gameBoard );\r\n    }\r\n\r\n    searchDown( startingX, startingY, player, gameBoard ) {\r\n        return this.searchAt( startingX, startingY, 1, 0, player, gameBoard );\r\n    }\r\n\r\n    searchUpAndRight( startingX, startingY, player, gameBoard ) {\r\n        return this.searchAt( startingX, startingY, -1, 1, player, gameBoard );\r\n    }\r\n\r\n    searchUpAndLeft( startingX, startingY, player, gameBoard ) {\r\n        return this.searchAt( startingX, startingY, -1, -1, player, gameBoard );\r\n    }\r\n\r\n    searchDownAndRight( startingX, startingY, player, gameBoard ) {\r\n        return this.searchAt( startingX, startingY, 1, 1, player, gameBoard );\r\n    }\r\n\r\n    searchDownAndLeft( startingX, startingY, player, gameBoard ) {\r\n        return this.searchAt( startingX, startingY, 1, -1, player, gameBoard );\r\n    }\r\n\r\n    searchAt( x, y, rowInc, colInc, player, gameBoard ) {\r\n        let cell = BoardManager.tryGetCell(  x + colInc , y + rowInc , gameBoard );\r\n        return cell !== null ?\r\n            this.calculatePoints( cell, rowInc, colInc, player, gameBoard ) : [];\r\n    }\r\n\r\n\r\n}\r\n","/**\r\n * Created by Eric on 4/4/2015.\r\n */\r\n\r\nclass Player {\r\n    constructor ( num ) {\r\n        this.number = num;\r\n        this.score = 2;\r\n        this.moves = [];\r\n    }\r\n}\r\n\r\nclass Move {\r\n    constructor ( row, col, points, playerId, isHighestScoring ) {\r\n        this.x = col;\r\n        this.y = row;\r\n        this.pointValue = points;\r\n        this.player = playerId;\r\n        this.time = 0;\r\n        this.timeInMatch = 0;\r\n        this.wasHighestScoring = isHighestScoring;\r\n    }\r\n}\r\n\r\nclass Cell {\r\n    constructor( row, col ) {\r\n        this.row = row;\r\n        this.col = col;\r\n        this.player = 0;\r\n        this.potentialTarget = false;\r\n    }\r\n}\r\n","\r\n/**\r\n * Created by Eric on 4/4/2015.\r\n */\r\n\r\n(() => {\r\n    let gameBoard = {\r\n            rows: [],\r\n            moves: []\r\n        },\r\n        _playerOne = new Player( 1 ),\r\n        _playerTwo = new Player( 2 ),\r\n        _activePlayer = _playerOne,\r\n        _players = [ _playerOne, _playerTwo ],\r\n        _scoreKeeper, _gameOver = false,\r\n        _startTime = new Date(),\r\n        _repo = new Repository(),\r\n        _lastMoveTime = new Date();\r\n\r\n    const rowNum = 8;\r\n    const colNum = 8;\r\n\r\n    for ( let i = 0; i < rowNum; i++ ) {\r\n        let row = [];\r\n        for ( let j = 0; j < colNum; j++ ) {\r\n            row.push( new Cell( i, j ) );\r\n        }\r\n        gameBoard.rows.push( row );\r\n    }\r\n\r\n    _scoreKeeper = new ScoreKeeper();\r\n\r\n    function renderGameBoard() {\r\n        let html = '';\r\n\r\n        gameBoard.rows.forEach( ( row, i ) => {\r\n            row.forEach( ( cell, j ) => {\r\n                html += `<div class='cell' data-target=\"${cell.potentialTarget}\" data-is-highest-scoring-move=\"${cell.isHighestScoring}\" data-player-num=\"${cell.player}\" data-row-num='${i}' data-col-num='${j}'>${cell.player}</div>`;\r\n            } );\r\n\r\n        } );\r\n\r\n        $( \".game-board\" ).html( html );\r\n    }\r\n\r\n    var recordTimeForMove = function ( move, matchStartTime ) {\r\n        let now = new Date();\r\n\r\n        move.time = now - _lastMoveTime;\r\n        move.timeInMatch = now - matchStartTime;\r\n        _lastMoveTime = now;\r\n\r\n        _repo.recordMove( {\r\n            players: _players,\r\n            gameBoard: gameBoard,\r\n            timestamp: now - matchStartTime,\r\n            gameCompleted: _gameOver\r\n        } );\r\n    };\r\n\r\n    $( \".game-board\" ).on( \"click\", \".cell\", function () {\r\n        let $cell = $( this );\r\n        let row = +$cell.data( \"row-num\" );\r\n        let col = +$cell.data( \"col-num\" );\r\n        let player = +$cell.data( \"player-num\" );\r\n        let isHighestScoring = $cell.data(\"is-highest-scoring-move\");\r\n        let cellObj = gameBoard.rows[ row ][ col ];\r\n        let isTarget = $cell.data( \"target\" );\r\n        let [ activePlayerNumber, otherPlayerNumber ] = getPlayerNumbers();\r\n\r\n        if ( !isTarget )\r\n            return;\r\n\r\n        // calculate points and set cell values\r\n        let hits = _scoreKeeper.setScoreForMove( col, row, activePlayerNumber, gameBoard );\r\n        let pointsEarned = hits.length;\r\n\r\n        if ( pointsEarned === 0 )\r\n            return;\r\n\r\n        let move = new Move( row, col, pointsEarned, activePlayerNumber, isHighestScoring );\r\n        gameBoard.moves.push( move );\r\n\r\n        cellObj.player = activePlayerNumber;\r\n\r\n        hits.forEach( function ( h ) {\r\n            h.player = activePlayerNumber\r\n        } );\r\n\r\n        recordTimeForMove( move, _startTime );\r\n\r\n        // check if next player has any moves based on board state\r\n        // no, declare victory, else continue\r\n        let potentialNextMoves = getPotentialNextMovesForNextPlayer();\r\n        console.log( \"Potential Next Moves: \", potentialNextMoves );\r\n        let highestScoringNextMove = potentialNextMoves.sort( ( c1, c2 ) => {\r\n            return c2.pointValue - c1.pointValue;\r\n        } )[ 0 ];\r\n\r\n        highestScoringNextMove.isHighestScoring = true;\r\n\r\n        //if ( gameOver ) {\r\n        //    // announce verdict\r\n        //    console.log(\"GAME OVER\");\r\n        //} else if ( nextPlayerHasMove ) {\r\n        //    updateActivePlayer( otherPlayerNumber );\r\n        //    // change active player in UI\r\n        //    console.log( \"It's now player %d's turn\", otherPlayerNumber );\r\n        //} else if ( currentPlayerHasMove ) {\r\n        //    // update UI with status\r\n        //    console.log( \"It's still player %d's turn\", otherPlayerNumber );\r\n        //}\r\n\r\n        updateActivePlayer( otherPlayerNumber );\r\n        renderGameBoard();\r\n        updateScoreBoards( _players );\r\n        _scoreKeeper.resetMoveScoreRatings( gameBoard );\r\n\r\n        if ( potentialNextMoves ) {\r\n            console.log( \"It's now player %d's turn\", otherPlayerNumber );\r\n        } else {\r\n            console.log( \"No next moves for player %d\", otherPlayerNumber );\r\n        }\r\n\r\n\r\n    } );\r\n\r\n    function getPotentialNextMovesForNextPlayer() {\r\n        let flatGamBoard = _scoreKeeper.getFlatGameBoard( gameBoard );\r\n        flatGamBoard.forEach( ( cell ) => {\r\n            cell.potentialTarget = false;\r\n        } );\r\n\r\n        let activePlayerCells = flatGamBoard\r\n            .filter( ( cell ) => {\r\n                return cell.player === _activePlayer.number;\r\n            } );\r\n\r\n        console.log( \"Active player cells: \", activePlayerCells );\r\n\r\n        let potentialNextMoves = [];\r\n\r\n        activePlayerCells.forEach( function ( c ) {\r\n            let above = BoardManager.tryGetCell( c.col, c.row - 1, gameBoard );\r\n            scoreMove( above, potentialNextMoves );\r\n\r\n            let aboveRight = BoardManager.tryGetCell( c.col + 1, c.row - 1, gameBoard );\r\n            scoreMove( aboveRight, potentialNextMoves );\r\n\r\n            let aboveLeft = BoardManager.tryGetCell( c.col - 1, c.row - 1, gameBoard );\r\n            scoreMove( aboveLeft, potentialNextMoves );\r\n\r\n            let left = BoardManager.tryGetCell( c.col - 1, c.row, gameBoard );\r\n            scoreMove( left, potentialNextMoves );\r\n\r\n            let right = BoardManager.tryGetCell( c.col + 1, c.row, gameBoard );\r\n            scoreMove( right, potentialNextMoves );\r\n\r\n            let below = BoardManager.tryGetCell( c.col, c.row + 1, gameBoard );\r\n            scoreMove( below, potentialNextMoves );\r\n\r\n            let belowRight = BoardManager.tryGetCell( c.col + 1, c.row + 1, gameBoard );\r\n            scoreMove( belowRight, potentialNextMoves );\r\n\r\n            let belowLeft = BoardManager.tryGetCell( c.col - 1, c.row + 1, gameBoard );\r\n            scoreMove( belowLeft, potentialNextMoves );\r\n        } );\r\n\r\n        return potentialNextMoves;\r\n    }\r\n\r\n    function moveEarnsPoints( cell ) {\r\n        let [x,  otherPlayerNumber ] = getPlayerNumbers(),\r\n            hits = _scoreKeeper.setScoreForMove( cell.col, cell.row, otherPlayerNumber, gameBoard ),\r\n            points = hits.length,\r\n            isHit = cell.player === 0 && points > 0;\r\n\r\n        return { isHit: isHit, points: points };\r\n    }\r\n\r\n    function scoreMove( move, potentialNextMoves ) {\r\n        if ( move === null ) return;\r\n\r\n        let moveResult = moveEarnsPoints( move );\r\n       // console.log( \"isHit: %d %d points: %d\", move.row, move.col, moveResult.points );\r\n        if ( moveResult.isHit ) {\r\n            move.potentialTarget = true;\r\n            move.pointValue = moveResult.points;\r\n\r\n            if ( potentialNextMoves.indexOf( move ) === -1 )\r\n                potentialNextMoves.push( move );\r\n        }\r\n    }\r\n\r\n    function updateActivePlayer( newPlayerNumber ) {\r\n        let playerIndex = newPlayerNumber === 1 ? 0 : 1;\r\n        _activePlayer = _players[ playerIndex ];\r\n    }\r\n\r\n    function updateScoreBoards( players ) {\r\n        players.forEach( function ( player ) {\r\n            let $playerSoreBoard = $( \".player-\" + player.number );\r\n\r\n            player.score = _scoreKeeper.getScoreForPlayer( player.number, gameBoard );\r\n\r\n            $( \".player-\" + player.number + \" .score\" ).html( player.score );\r\n            $( \".player-\" + player.number + \" .moves\" ).html( player.moves.length );\r\n\r\n            if ( player.number === _activePlayer.number ) {\r\n                $playerSoreBoard.addClass( \"active\" );\r\n            } else {\r\n                $playerSoreBoard.removeClass( \"active\" );\r\n            }\r\n        } );\r\n    }\r\n\r\n    function setNewGameValues() {\r\n        gameBoard.rows[ 3 ][ 3 ].player = 1;\r\n        gameBoard.rows[ 4 ][ 3 ].player = 2;\r\n        gameBoard.rows[ 3 ][ 4 ].player = 2;\r\n        gameBoard.rows[ 4 ][ 4 ].player = 1;\r\n\r\n        // mark player one potential targets\r\n        let potentialMoves = [\r\n            gameBoard.rows[ 2 ][ 4 ],\r\n            gameBoard.rows[ 3 ][ 5 ],\r\n            gameBoard.rows[ 4 ][ 2 ],\r\n            gameBoard.rows[ 5 ][ 3 ]\r\n        ];\r\n\r\n        potentialMoves.forEach( function ( cell ) {\r\n            cell.potentialTarget = true;\r\n        } );\r\n    }\r\n\r\n    function getPlayerNumbers() {\r\n        let otherPlayerIndex = _activePlayer.number === 1 ? 1 : 0;\r\n        return [ _activePlayer.number, _players[ otherPlayerIndex ].number ];\r\n    }\r\n\r\n    setNewGameValues();\r\n    renderGameBoard();\r\n    updateScoreBoards( _players );\r\n\r\n\r\n    console.log( \"Empty cells: \", _scoreKeeper.getEmptyCells( gameBoard ) );\r\n})();\r\n"],"sourceRoot":"/source/"}