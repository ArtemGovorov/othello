{"version":3,"sources":["BoardManager.js","Repository.js","ScoreKeeper.js","models.js","othello.js"],"names":["BoardManager","tryGetCell","x","y","gameBoard","this","isValidMove","rows","Repository","snapshots","prototype","recordMove","data","snapshot","getSnapshotPattern","console","log","push","snapShots","gameboard","moves","reduce","pattern","move","player","wasHighestScoring","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","ScoreKeeper","value","playerNumber","self","getEmptyCells","forEach","cell","setScoreForMove","col","row","hits","concat","searchUp","searchUpAndRight","searchRight","searchDownAndRight","searchDown","searchDownAndLeft","searchLeft","searchUpAndLeft","Array","apply","getFlatGameBoard","filter","c","rowInc","colInc","getScore","_x","_x2","_again","checkResult","undefined","r","checkCell","isEmpty","isPoint","cells","valid","empty","point","score","isHighestScoring","startingX","startingY","searchAt","calculatePoints","Player","num","number","Move","points","playerId","pointValue","time","timeInMatch","Cell","potentialTarget","_slicedToArray","arr","isArray","Symbol","iterator","_arr","_n","_d","_e","_s","_i","next","done","err","renderGameBoard","html","j","$","getPotentialNextMovesForNextPlayer","flatGamBoard","_scoreKeeper","activePlayerCells","_activePlayer","potentialNextMoves","above","scoreMove","aboveRight","aboveLeft","left","right","below","belowRight","belowLeft","moveEarnsPoints","_getPlayerNumbers3","getPlayerNumbers","_getPlayerNumbers32","otherPlayerNumber","isHit","moveResult","indexOf","updateActivePlayer","newPlayerNumber","playerIndex","_players","updateScoreBoards","players","$playerSoreBoard","getScoreForPlayer","addClass","removeClass","setNewGameValues","potentialMoves","otherPlayerIndex","_playerOne","_playerTwo","_gameOver","_startTime","Date","_repo","_lastMoveTime","rowNum","colNum","recordTimeForMove","matchStartTime","now","timestamp","gameCompleted","on","$cell","cellObj","isTarget","_getPlayerNumbers","_getPlayerNumbers2","activePlayerNumber","pointsEarned","h","highestScoringNextMove","sort","c1","c2","resetMoveScoreRatings"],"mappings":"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","file":"app.js","sourcesContent":["/**\r\n * Created by Eric on 4/9/2015.\r\n */\r\n\r\nvar BoardManager = {\r\n    tryGetCell: function ( x, y, gameBoard ) {\r\n        return this.isValidMove( x, y ) ?\r\n            gameBoard.rows[ y ][ x ] :\r\n            null;\r\n    },\r\n    isValidMove: function ( x, y ) {\r\n        //console.log(\"isValidMove: %d %d \", x, y);\r\n        return ( x > -1 && y > -1 ) &&\r\n            ( x < 8 && y < 8 );\r\n    }\r\n};\r\n","/**\r\n * Created by Eric on 4/12/2015.\r\n */\r\n\r\nvar Repository = function () {\r\n    this.snapshots = [];\r\n};\r\n\r\nRepository.prototype.recordMove = function ( data ) {\r\n    let snapshot = this.getSnapshotPattern( data.gameBoard );\r\n    console.log( \"Snapshot created: \", snapshot );\r\n\r\n    this.snapshots.push( snapshot );\r\n    data.snapShots = this.snapshots;\r\n    console.log( \"Saving Data: \", data );\r\n};\r\n\r\nRepository.prototype.getSnapshotPattern = function ( gameboard ) {\r\n    return gameboard.moves.reduce( function ( pattern, move ) {\r\n        return pattern + `${move.x}-${move.y}-${move.player}-${ +move.wasHighestScoring || 0},`;\r\n    }, \"\" );\r\n};\r\n","/**\r\n * Created by Eric on 4/5/2015.\r\n */\r\nclass ScoreKeeper {\r\n    constructor() {\r\n    }\r\n\r\n    playerHasNextMove( playerNumber, gameBoard ) {\r\n        let self = this;\r\n        self.getEmptyCells( gameBoard ).forEach( function ( cell ) {\r\n            if ( self.setScoreForMove( cell.col, cell.row, playerNumber ) > 0 ) {\r\n                return true;\r\n            }\r\n        } );\r\n\r\n        return false;\r\n    }\r\n\r\n\r\n    setScoreForMove( x, y, player, gameBoard ) {\r\n        let hits = [];\r\n\r\n        hits = hits.concat( this.searchUp( x, y, player, gameBoard ) );\r\n        hits = hits.concat( this.searchUpAndRight( x, y, player, gameBoard ) );\r\n        hits = hits.concat( this.searchRight( x, y, player, gameBoard ) );\r\n        hits = hits.concat( this.searchDownAndRight( x, y, player, gameBoard ) );\r\n        hits = hits.concat( this.searchDown( x, y, player, gameBoard ) );\r\n        hits = hits.concat( this.searchDownAndLeft( x, y, player, gameBoard ) );\r\n        hits = hits.concat( this.searchLeft( x, y, player, gameBoard ) );\r\n        hits = hits.concat( this.searchUpAndLeft( x, y, player, gameBoard ) );\r\n\r\n        return hits;\r\n    }\r\n\r\n    getFlatGameBoard( gameBoard ) {\r\n        return Array.prototype.concat.apply( [], gameBoard.rows );\r\n    }\r\n\r\n    getEmptyCells( gameBoard ) {\r\n        return this.getFlatGameBoard( gameBoard ).filter( function ( c ) {\r\n            return c.player === 0;\r\n        } );\r\n    }\r\n\r\n    calculatePoints( cell, rowInc, colInc, player, gameBoard ) {\r\n        let cells = [], self = this;\r\n\r\n        function getScore( r, c ) {\r\n            if ( BoardManager.tryGetCell( c, r, gameBoard ) === null ) {\r\n                return [];\r\n            }\r\n\r\n            let cell = gameBoard.rows[ r ][ c ],\r\n                checkResult = self.checkCell( cell, player );\r\n\r\n            if ( !checkResult.isValidMove || checkResult.isEmpty ) {\r\n                return [];\r\n            } else if ( checkResult.isPoint ) {\r\n                cells.push( cell );\r\n                return getScore( r + rowInc, c + colInc );\r\n            } else {\r\n                return cells;\r\n            }\r\n        }\r\n\r\n        return getScore( cell.row, cell.col );\r\n    }\r\n\r\n    checkCell( cell, player ) {\r\n        let valid = BoardManager.isValidMove( cell.col, cell.row ),\r\n            empty = valid ? cell.player === 0 : false,\r\n            point = valid ? cell.player !== player && !empty : false;\r\n\r\n        return {\r\n            isValidMove: valid,\r\n            isEmpty: empty,\r\n            isPoint: point\r\n        };\r\n    }\r\n\r\n    getScoreForPlayer( playerNumber, gameBoard ) {\r\n        return this.getFlatGameBoard( gameBoard ).reduce( function ( score, cell ) {\r\n            if ( cell.player === playerNumber ) {\r\n                score++;\r\n            }\r\n            return score;\r\n        }, 0 )\r\n    }\r\n\r\n    resetMoveScoreRatings( gameBoard ) {\r\n        this.getFlatGameBoard( gameBoard ).forEach( function ( cell ) {\r\n            cell.isHighestScoring = false;\r\n        } );\r\n\r\n        return gameBoard;\r\n    }\r\n\r\n    searchRight( startingX, startingY, player, gameBoard ) {\r\n        return this.searchAt( startingX, startingY, 0, 1, player, gameBoard );\r\n    }\r\n\r\n    searchLeft( startingX, startingY, player, gameBoard ) {\r\n        return this.searchAt( startingX, startingY, 0, -1, player, gameBoard );\r\n    }\r\n\r\n    searchUp( startingX, startingY, player, gameBoard ) {\r\n        return this.searchAt( startingX, startingY, -1, 0, player, gameBoard );\r\n    }\r\n\r\n    searchDown( startingX, startingY, player, gameBoard ) {\r\n        return this.searchAt( startingX, startingY, 1, 0, player, gameBoard );\r\n    }\r\n\r\n    searchUpAndRight( startingX, startingY, player, gameBoard ) {\r\n        return this.searchAt( startingX, startingY, -1, 1, player, gameBoard );\r\n    }\r\n\r\n    searchUpAndLeft( startingX, startingY, player, gameBoard ) {\r\n        return this.searchAt( startingX, startingY, -1, -1, player, gameBoard );\r\n    }\r\n\r\n    searchDownAndRight( startingX, startingY, player, gameBoard ) {\r\n        return this.searchAt( startingX, startingY, 1, 1, player, gameBoard );\r\n    }\r\n\r\n    searchDownAndLeft( startingX, startingY, player, gameBoard ) {\r\n        return this.searchAt( startingX, startingY, 1, -1, player, gameBoard );\r\n    }\r\n\r\n    searchAt( x, y, rowInc, colInc, player, gameBoard ) {\r\n        let cell = BoardManager.tryGetCell(  x + colInc , y + rowInc , gameBoard );\r\n        return cell !== null ?\r\n            this.calculatePoints( cell, rowInc, colInc, player, gameBoard ) : [];\r\n    }\r\n\r\n\r\n}","/**\r\n * Created by Eric on 4/4/2015.\r\n */\r\n\r\nclass Player {\r\n    constructor ( num ) {\r\n        this.number = num;\r\n        this.score = 2;\r\n        this.moves = [];\r\n    }\r\n}\r\n\r\nclass Move {\r\n    constructor ( row, col, points, playerId, isHighestScoring ) {\r\n        this.x = col;\r\n        this.y = row;\r\n        this.pointValue = points;\r\n        this.player = playerId;\r\n        this.time = 0;\r\n        this.timeInMatch = 0;\r\n        this.wasHighestScoring = isHighestScoring;\r\n    }\r\n}\r\n\r\nclass Cell {\r\n    constructor( row, col ) {\r\n        this.row = row;\r\n        this.col = col;\r\n        this.player = 0;\r\n        this.potentialTarget = false;\r\n    }\r\n}\r\n\r\n","\r\n/**\r\n * Created by Eric on 4/4/2015.\r\n */\r\n\r\n(() => {\r\n    let gameBoard = {\r\n            rows: [],\r\n            moves: []\r\n        },\r\n        _playerOne = new Player( 1 ),\r\n        _playerTwo = new Player( 2 ),\r\n        _activePlayer = _playerOne,\r\n        _players = [ _playerOne, _playerTwo ],\r\n        _scoreKeeper, _gameOver = false,\r\n        _startTime = new Date(),\r\n        _repo = new Repository(),\r\n        _lastMoveTime = new Date();\r\n\r\n    const rowNum = 8;\r\n    const colNum = 8;\r\n\r\n    for ( let i = 0; i < rowNum; i++ ) {\r\n        let row = [];\r\n        for ( let j = 0; j < colNum; j++ ) {\r\n            row.push( new Cell( i, j ) );\r\n        }\r\n        gameBoard.rows.push( row );\r\n    }\r\n\r\n    _scoreKeeper = new ScoreKeeper();\r\n\r\n    function renderGameBoard() {\r\n        console.log( \"Gameboard: \", gameBoard );\r\n        let html = '';\r\n        gameBoard.rows.forEach( function ( row, i ) {\r\n            row.forEach( function ( cell, j ) {\r\n                html += `<div class='cell' data-target=\"${cell.potentialTarget}\" data-is-highest-scoring-move=\"${cell.isHighestScoring}\" data-player-num=\"${cell.player}\" data-row-num='${i}' data-col-num='${j}'>${cell.player}</div>`;\r\n            } );\r\n\r\n        } );\r\n\r\n        $( \".game-board\" ).html( html );\r\n    }\r\n\r\n    var recordTimeForMove = function ( move, matchStartTime ) {\r\n        let now = new Date();\r\n        move.time = now - _lastMoveTime;\r\n        move.timeInMatch = now - matchStartTime;\r\n        _lastMoveTime = now;\r\n\r\n        console.log(\"Move recorded: \", move);\r\n\r\n        _repo.recordMove( {\r\n            players: _players,\r\n            gameBoard: gameBoard,\r\n            timestamp: now - matchStartTime,\r\n            gameCompleted: _gameOver\r\n        } );\r\n    };\r\n\r\n    $( \".game-board\" ).on( \"click\", \".cell\", function () {\r\n        let $cell = $( this );\r\n        let row = +$cell.data( \"row-num\" );\r\n        let col = +$cell.data( \"col-num\" );\r\n        let player = +$cell.data( \"player-num\" );\r\n        let isHighestScoring = $cell.data(\"is-highest-scoring-move\");\r\n        let cellObj = gameBoard.rows[ row ][ col ];\r\n        let isTarget = $cell.data( \"target\" );\r\n        let [ activePlayerNumber, otherPlayerNumber ] = getPlayerNumbers();\r\n\r\n        if ( !isTarget )\r\n            return;\r\n        // calculate points and set cell values\r\n        let hits = _scoreKeeper.setScoreForMove( col, row, activePlayerNumber, gameBoard );\r\n        let pointsEarned = hits.length;\r\n\r\n        if ( pointsEarned === 0 )\r\n            return;\r\n\r\n        let move = new Move( row, col, pointsEarned, activePlayerNumber, isHighestScoring );\r\n        gameBoard.moves.push( move );\r\n\r\n\r\n        cellObj.player = activePlayerNumber;\r\n\r\n        hits.forEach( function ( h ) {\r\n            h.player = activePlayerNumber\r\n        } );\r\n\r\n        recordTimeForMove( move, _startTime );\r\n\r\n        // check if next player has any moves based on board state\r\n        // no, declare victory, else continue\r\n        let potentialNextMoves = getPotentialNextMovesForNextPlayer();\r\n        console.log( \"Potential Next Moves: \", potentialNextMoves );\r\n        let highestScoringNextMove = potentialNextMoves.sort( function ( c1, c2 ) {\r\n            return c2.pointValue - c1.pointValue;\r\n        } )[ 0 ];\r\n\r\n        highestScoringNextMove.isHighestScoring = true;\r\n\r\n        //if ( gameOver ) {\r\n        //    // announce verdict\r\n        //    console.log(\"GAME OVER\");\r\n        //} else if ( nextPlayerHasMove ) {\r\n        //    updateActivePlayer( otherPlayerNumber );\r\n        //    // change active player in UI\r\n        //    console.log( \"It's now player %d's turn\", otherPlayerNumber );\r\n        //} else if ( currentPlayerHasMove ) {\r\n        //    // update UI with status\r\n        //    console.log( \"It's still player %d's turn\", otherPlayerNumber );\r\n        //}\r\n\r\n        updateActivePlayer( otherPlayerNumber );\r\n        renderGameBoard();\r\n        updateScoreBoards( _players );\r\n        _scoreKeeper.resetMoveScoreRatings( gameBoard );\r\n\r\n        if ( potentialNextMoves ) {\r\n            console.log( \"It's now player %d's turn\", otherPlayerNumber );\r\n        } else {\r\n            console.log( \"No next moves for player %d\", otherPlayerNumber );\r\n        }\r\n\r\n\r\n    } );\r\n\r\n    function getPotentialNextMovesForNextPlayer() {\r\n        let flatGamBoard = _scoreKeeper.getFlatGameBoard( gameBoard );\r\n        flatGamBoard.forEach( function ( cell ) {\r\n            cell.potentialTarget = false;\r\n        } );\r\n\r\n        let activePlayerCells = flatGamBoard\r\n            .filter( function ( cell ) {\r\n                return cell.player === _activePlayer.number;\r\n            } );\r\n\r\n        console.log( \"Active player cells: \", activePlayerCells );\r\n\r\n        let potentialNextMoves = [];\r\n\r\n        activePlayerCells.forEach( function ( c ) {\r\n            let above = BoardManager.tryGetCell( c.col, c.row - 1, gameBoard );\r\n            scoreMove( above, potentialNextMoves );\r\n\r\n            let aboveRight = BoardManager.tryGetCell( c.col + 1, c.row - 1, gameBoard );\r\n            scoreMove( aboveRight, potentialNextMoves );\r\n\r\n            let aboveLeft = BoardManager.tryGetCell( c.col - 1, c.row - 1, gameBoard );\r\n            scoreMove( aboveLeft, potentialNextMoves );\r\n\r\n            let left = BoardManager.tryGetCell( c.col - 1, c.row, gameBoard );\r\n            scoreMove( left, potentialNextMoves );\r\n\r\n            let right = BoardManager.tryGetCell( c.col + 1, c.row, gameBoard );\r\n            scoreMove( right, potentialNextMoves );\r\n\r\n            let below = BoardManager.tryGetCell( c.col, c.row + 1, gameBoard );\r\n            scoreMove( below, potentialNextMoves );\r\n\r\n            let belowRight = BoardManager.tryGetCell( c.col + 1, c.row + 1, gameBoard );\r\n            scoreMove( belowRight, potentialNextMoves );\r\n\r\n            let belowLeft = BoardManager.tryGetCell( c.col - 1, c.row + 1, gameBoard );\r\n            scoreMove( belowLeft, potentialNextMoves );\r\n        } );\r\n\r\n        return potentialNextMoves;\r\n    }\r\n\r\n    function moveEarnsPoints( cell ) {\r\n        let [x,  otherPlayerNumber ] = getPlayerNumbers(),\r\n            hits = _scoreKeeper.setScoreForMove( cell.col, cell.row, otherPlayerNumber, gameBoard ),\r\n            points = hits.length,\r\n            isHit = cell.player === 0 && points > 0;\r\n\r\n        return { isHit: isHit, points: points };\r\n    }\r\n\r\n    function scoreMove( move, potentialNextMoves ) {\r\n        if ( move === null ) return;\r\n\r\n        let moveResult = moveEarnsPoints( move );\r\n       // console.log( \"isHit: %d %d points: %d\", move.row, move.col, moveResult.points );\r\n        if ( moveResult.isHit ) {\r\n            move.potentialTarget = true;\r\n            move.pointValue = moveResult.points;\r\n\r\n            if ( potentialNextMoves.indexOf( move ) === -1 )\r\n                potentialNextMoves.push( move );\r\n        }\r\n    }\r\n\r\n    function updateActivePlayer( newPlayerNumber ) {\r\n        let playerIndex = newPlayerNumber === 1 ? 0 : 1;\r\n        _activePlayer = _players[ playerIndex ];\r\n    }\r\n\r\n    function updateScoreBoards( players ) {\r\n        players.forEach( function ( player ) {\r\n            let $playerSoreBoard = $( \".player-\" + player.number );\r\n\r\n            player.score = _scoreKeeper.getScoreForPlayer( player.number, gameBoard );\r\n\r\n            $( \".player-\" + player.number + \" .score\" ).html( player.score );\r\n            $( \".player-\" + player.number + \" .moves\" ).html( player.moves.length );\r\n\r\n            if ( player.number === _activePlayer.number ) {\r\n                $playerSoreBoard.addClass( \"active\" );\r\n            } else {\r\n                $playerSoreBoard.removeClass( \"active\" );\r\n            }\r\n        } );\r\n    }\r\n\r\n    function setNewGameValues() {\r\n        gameBoard.rows[ 3 ][ 3 ].player = 1;\r\n        gameBoard.rows[ 4 ][ 3 ].player = 2;\r\n        gameBoard.rows[ 3 ][ 4 ].player = 2;\r\n        gameBoard.rows[ 4 ][ 4 ].player = 1;\r\n\r\n        // mark player one potential targets\r\n        let potentialMoves = [\r\n            gameBoard.rows[ 2 ][ 4 ],\r\n            gameBoard.rows[ 3 ][ 5 ],\r\n            gameBoard.rows[ 4 ][ 2 ],\r\n            gameBoard.rows[ 5 ][ 3 ]\r\n        ];\r\n\r\n        potentialMoves.forEach( function ( cell ) {\r\n            cell.potentialTarget = true;\r\n        } );\r\n    }\r\n\r\n    function getPlayerNumbers() {\r\n        let otherPlayerIndex = _activePlayer.number === 1 ? 1 : 0;\r\n        return [ _activePlayer.number, _players[ otherPlayerIndex ].number ];\r\n    }\r\n\r\n    setNewGameValues();\r\n    renderGameBoard();\r\n    updateScoreBoards( _players );\r\n\r\n\r\n    console.log( \"Empty cells: \", _scoreKeeper.getEmptyCells( gameBoard ) );\r\n})();\r\n"],"sourceRoot":"/source/"}