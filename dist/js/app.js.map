{"version":3,"sources":["BoardManager.js","ScoreKeeper.js","models.js","othello.js"],"names":["BoardManager","tryGetCell","x","y","gameBoard","this","isValidMove","rows","console","log","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","ScoreKeeper","value","playerNumber","self","getEmptyCells","forEach","cell","setScoreForMove","col","row","player","hits","concat","searchUp","searchUpAndRight","searchRight","searchDownAndRight","searchDown","searchDownAndLeft","searchLeft","searchUpAndLeft","Array","apply","getFlatGameBoard","filter","c","rowInc","colInc","getScore","_x","_x2","_again","checkResult","undefined","r","checkCell","isEmpty","isPoint","cells","push","valid","empty","point","reduce","score","isHighestScoring","startingX","startingY","searchAt","calculatePoints","Player","num","number","moves","Move","points","playerId","pointValue","time","Cell","potentialTarget","_slicedToArray","arr","isArray","Symbol","iterator","_arr","_n","_d","_e","_s","_i","next","done","err","renderGameBoard","html","j","$","getPotentialNextMovesForNextPlayer","flatGamBoard","_scoreKeeper","activePlayerCells","_activePlayer","potentialNextMoves","above","scoreMove","aboveRight","aboveLeft","left","right","below","belowRight","belowLeft","moveEarnsPoints","_getPlayerNumbers3","getPlayerNumbers","_getPlayerNumbers32","otherPlayerNumber","isHit","move","moveResult","indexOf","updateActivePlayer","newPlayerNumber","playerIndex","_players","updateScoreBoards","players","$playerSoreBoard","getScoreForPlayer","addClass","removeClass","setNewGameValues","otherPlayerIndex","_playerOne","_playerTwo","rowNum","Date","colNum","on","$cell","data","cellObj","isTarget","_getPlayerNumbers","_getPlayerNumbers2","activePlayerNumber","pointsEarned","recordTimeforMove","h","highestScoringNextMove","sort","c1","c2","resetMoveScoreRatings"],"mappings":"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","file":"app.js","sourcesContent":["/**\r\n * Created by Eric on 4/9/2015.\r\n */\r\n\r\nvar BoardManager = {\r\n    tryGetCell: function ( x, y, gameBoard ) {\r\n        return this.isValidMove( x, y ) ?\r\n            gameBoard.rows[ y ][ x ] :\r\n            null;\r\n    },\r\n    isValidMove: function ( x, y ) {\r\n        console.log(\"isValidMove: %d %d \", x, y);\r\n        return ( x > -1 && y > -1 ) &&\r\n            ( x < 8 && y < 8 );\r\n    }\r\n};\r\n","/**\r\n * Created by Eric on 4/5/2015.\r\n */\r\nclass ScoreKeeper {\r\n    constructor() {\r\n    }\r\n\r\n    playerHasNextMove( playerNumber, gameBoard ) {\r\n        let self = this;\r\n        self.getEmptyCells( gameBoard ).forEach( function ( cell ) {\r\n            if ( self.setScoreForMove( cell.col, cell.row, playerNumber ) > 0 ) {\r\n                return true;\r\n            }\r\n        } );\r\n\r\n        return false;\r\n    }\r\n\r\n\r\n    setScoreForMove( x, y, player, gameBoard ) {\r\n        let hits = [];\r\n\r\n        hits = hits.concat( this.searchUp( x, y, player, gameBoard ) );\r\n        hits = hits.concat( this.searchUpAndRight( x, y, player, gameBoard ) );\r\n        hits = hits.concat( this.searchRight( x, y, player, gameBoard ) );\r\n        hits = hits.concat( this.searchDownAndRight( x, y, player, gameBoard ) );\r\n        hits = hits.concat( this.searchDown( x, y, player, gameBoard ) );\r\n        hits = hits.concat( this.searchDownAndLeft( x, y, player, gameBoard ) );\r\n        hits = hits.concat( this.searchLeft( x, y, player, gameBoard ) );\r\n        hits = hits.concat( this.searchUpAndLeft( x, y, player, gameBoard ) );\r\n\r\n        return hits;\r\n    }\r\n\r\n    getFlatGameBoard( gameBoard ) {\r\n        return Array.prototype.concat.apply( [], gameBoard.rows );\r\n    }\r\n\r\n    getEmptyCells( gameBoard ) {\r\n        return this.getFlatGameBoard( gameBoard ).filter( function ( c ) {\r\n            return c.player === 0;\r\n        } );\r\n    }\r\n\r\n    calculatePoints( cell, rowInc, colInc, player, gameBoard ) {\r\n        let cells = [], self = this;\r\n\r\n        function getScore( r, c ) {\r\n            if ( BoardManager.tryGetCell( c, r, gameBoard ) === null ) {\r\n                return [];\r\n            }\r\n\r\n            let cell = gameBoard.rows[ r ][ c ],\r\n                checkResult = self.checkCell( cell, player );\r\n\r\n            if ( !checkResult.isValidMove || checkResult.isEmpty ) {\r\n                return [];\r\n            } else if ( checkResult.isPoint ) {\r\n                cells.push( cell );\r\n                return getScore( r + rowInc, c + colInc );\r\n            } else {\r\n                return cells;\r\n            }\r\n        }\r\n\r\n        return getScore( cell.row, cell.col );\r\n    }\r\n\r\n    checkCell( cell, player ) {\r\n        let valid = BoardManager.isValidMove( cell.col, cell.row ),\r\n            empty = valid ? cell.player === 0 : false,\r\n            point = valid ? cell.player !== player && !empty : false;\r\n\r\n        return {\r\n            isValidMove: valid,\r\n            isEmpty: empty,\r\n            isPoint: point\r\n        };\r\n    }\r\n\r\n    getScoreForPlayer( playerNumber, gameBoard ) {\r\n        return this.getFlatGameBoard( gameBoard ).reduce( function ( score, cell ) {\r\n            if ( cell.player === playerNumber ) {\r\n                score++;\r\n            }\r\n            return score;\r\n        }, 0 )\r\n    }\r\n\r\n    resetMoveScoreRatings( gameBoard ) {\r\n        this.getFlatGameBoard( gameBoard ).forEach( function ( cell ) {\r\n            cell.isHighestScoring = false;\r\n        } );\r\n\r\n        return gameBoard;\r\n    }\r\n\r\n    searchRight( startingX, startingY, player, gameBoard ) {\r\n        return this.searchAt( startingX, startingY, 0, 1, player, gameBoard );\r\n    }\r\n\r\n    searchLeft( startingX, startingY, player, gameBoard ) {\r\n        return this.searchAt( startingX, startingY, 0, -1, player, gameBoard );\r\n    }\r\n\r\n    searchUp( startingX, startingY, player, gameBoard ) {\r\n        return this.searchAt( startingX, startingY, -1, 0, player, gameBoard );\r\n    }\r\n\r\n    searchDown( startingX, startingY, player, gameBoard ) {\r\n        return this.searchAt( startingX, startingY, 1, 0, player, gameBoard );\r\n    }\r\n\r\n    searchUpAndRight( startingX, startingY, player, gameBoard ) {\r\n        return this.searchAt( startingX, startingY, -1, 1, player, gameBoard );\r\n    }\r\n\r\n    searchUpAndLeft( startingX, startingY, player, gameBoard ) {\r\n        return this.searchAt( startingX, startingY, -1, -1, player, gameBoard );\r\n    }\r\n\r\n    searchDownAndRight( startingX, startingY, player, gameBoard ) {\r\n        return this.searchAt( startingX, startingY, 1, 1, player, gameBoard );\r\n    }\r\n\r\n    searchDownAndLeft( startingX, startingY, player, gameBoard ) {\r\n        return this.searchAt( startingX, startingY, 1, -1, player, gameBoard );\r\n    }\r\n\r\n    searchAt( x, y, rowInc, colInc, player, gameBoard ) {\r\n        let cell = BoardManager.tryGetCell(  x + colInc , y + rowInc , gameBoard );\r\n        return cell !== null ?\r\n            this.calculatePoints( cell, rowInc, colInc, player, gameBoard ) : [];\r\n    }\r\n\r\n\r\n}","/**\r\n * Created by Eric on 4/4/2015.\r\n */\r\n\r\nclass Player {\r\n    constructor ( num ) {\r\n        this.number = num;\r\n        this.score = 2;\r\n        this.moves = [];\r\n    }\r\n}\r\n\r\nclass Move {\r\n    constructor ( row, col, points, playerId ) {\r\n        this.x = col;\r\n        this.y = row;\r\n        this.pointValue = points;\r\n        this.player = playerId;\r\n        this.time = 0;\r\n    }\r\n}\r\n\r\nclass Cell {\r\n    constructor( row, col ) {\r\n        this.row = row;\r\n        this.col = col;\r\n        this.player = 0;\r\n        this.potentialTarget = false;\r\n    }\r\n}\r\n\r\n","\r\n/**\r\n * Created by Eric on 4/4/2015.\r\n */\r\n\r\n(() => {\r\n    let gameBoard = {\r\n            rows: []\r\n        },\r\n        _playerOne = new Player( 1 ),\r\n        _playerTwo = new Player( 2 ),\r\n        _activePlayer = _playerOne,\r\n        _players = [ _playerOne, _playerTwo ],\r\n        _scoreKeeper,\r\n        _startTime = new Date(),\r\n        _lastMoveTime = new Date();\r\n\r\n    const rowNum = 8;\r\n    const colNum = 8;\r\n\r\n    for ( let i = 0; i < rowNum; i++ ) {\r\n        let row = [];\r\n        for ( let j = 0; j < colNum; j++ ) {\r\n            row.push( new Cell( i, j ) );\r\n        }\r\n        gameBoard.rows.push( row );\r\n    }\r\n\r\n    _scoreKeeper = new ScoreKeeper();\r\n\r\n    function renderGameBoard() {\r\n        console.log( \"Gameboard: \", gameBoard );\r\n        let html = '';\r\n        gameBoard.rows.forEach( function ( row, i ) {\r\n            row.forEach( function ( cell, j ) {\r\n                html += `<div class='cell' data-target=\"${cell.potentialTarget}\" data-is-highest-sciring-move=\"${cell.isHighestScoring}\" data-player-num=\"${cell.player}\" data-row-num='${i}' data-col-num='${j}'>${cell.player}</div>`;\r\n            } );\r\n\r\n        } );\r\n\r\n        $( \".game-board\" ).html( html );\r\n    }\r\n\r\n    var recordTimeForMove = function ( move ) {\r\n        let now = new Date();\r\n        move.time = now - _lastMoveTime;\r\n        _lastMoveTime = now;\r\n\r\n        console.log(\"Move recorded: \", move);\r\n    };\r\n\r\n    $( \".game-board\" ).on( \"click\", \".cell\", function () {\r\n        let $cell = $( this );\r\n        let row = +$cell.data( \"row-num\" );\r\n        let col = +$cell.data( \"col-num\" );\r\n        let player = +$cell.data( \"player-num\" );\r\n        let cellObj = gameBoard.rows[ row ][ col ];\r\n        let isTarget = $cell.data( \"target\" );\r\n        let [ activePlayerNumber, otherPlayerNumber ] = getPlayerNumbers();\r\n\r\n        if ( !isTarget )\r\n            return;\r\n        // calculate points and set cell values\r\n        let hits = _scoreKeeper.setScoreForMove( col, row, activePlayerNumber, gameBoard );\r\n        let pointsEarned = hits.length;\r\n\r\n        if ( pointsEarned === 0 )\r\n            return;\r\n\r\n        let move = new Move( row, col, pointsEarned );\r\n        recordTimeforMove( move );\r\n        _activePlayer.moves.push( move );\r\n\r\n        cellObj.player = activePlayerNumber;\r\n\r\n        hits.forEach( function ( h ) {\r\n            h.player = activePlayerNumber\r\n        } );\r\n\r\n        // check if next player has any moves based on board state\r\n        // no, declare victory, else continue\r\n        let potentialNextMoves = getPotentialNextMovesForNextPlayer();\r\n        console.log( \"Potential Next Moves: \", potentialNextMoves );\r\n        let highestScoringNextMove = potentialNextMoves.sort( function ( c1, c2 ) {\r\n            return c2.pointValue - c1.pointValue;\r\n        } )[ 0 ];\r\n\r\n        highestScoringNextMove.isHighestScoring = true;\r\n\r\n        //if ( gameOver ) {\r\n        //    // announce verdict\r\n        //    console.log(\"GAME OVER\");\r\n        //} else if ( nextPlayerHasMove ) {\r\n        //    updateActivePlayer( otherPlayerNumber );\r\n        //    // change active player in UI\r\n        //    console.log( \"It's now player %d's turn\", otherPlayerNumber );\r\n        //} else if ( currentPlayerHasMove ) {\r\n        //    // update UI with status\r\n        //    console.log( \"It's still player %d's turn\", otherPlayerNumber );\r\n        //}\r\n\r\n        updateActivePlayer( otherPlayerNumber );\r\n        renderGameBoard();\r\n        updateScoreBoards( _players );\r\n        _scoreKeeper.resetMoveScoreRatings( gameBoard );\r\n\r\n        if ( potentialNextMoves ) {\r\n            console.log( \"It's now player %d's turn\", otherPlayerNumber );\r\n        } else {\r\n            console.log( \"No next moves for player %d\", otherPlayerNumber );\r\n        }\r\n\r\n\r\n    } );\r\n\r\n    function getPotentialNextMovesForNextPlayer() {\r\n        let flatGamBoard = _scoreKeeper.getFlatGameBoard( gameBoard );\r\n        flatGamBoard.forEach( function ( cell ) {\r\n            cell.potentialTarget = false;\r\n        } );\r\n\r\n        let activePlayerCells = flatGamBoard\r\n            .filter( function ( cell ) {\r\n                return cell.player === _activePlayer.number;\r\n            } );\r\n\r\n        console.log( \"Active player cells: \", activePlayerCells );\r\n\r\n        let potentialNextMoves = [];\r\n\r\n        activePlayerCells.forEach( function ( c ) {\r\n            let above = BoardManager.tryGetCell( c.col, c.row - 1, gameBoard );\r\n            scoreMove( above, potentialNextMoves );\r\n\r\n            let aboveRight = BoardManager.tryGetCell( c.col + 1, c.row - 1, gameBoard );\r\n            scoreMove( aboveRight, potentialNextMoves );\r\n\r\n            let aboveLeft = BoardManager.tryGetCell( c.col - 1, c.row - 1, gameBoard );\r\n            scoreMove( aboveLeft, potentialNextMoves );\r\n\r\n            let left = BoardManager.tryGetCell( c.col - 1, c.row, gameBoard );\r\n            scoreMove( left, potentialNextMoves );\r\n\r\n            let right = BoardManager.tryGetCell( c.col + 1, c.row, gameBoard );\r\n            scoreMove( right, potentialNextMoves );\r\n\r\n            let below = BoardManager.tryGetCell( c.col, c.row + 1, gameBoard );\r\n            scoreMove( below, potentialNextMoves );\r\n\r\n            let belowRight = BoardManager.tryGetCell( c.col + 1, c.row + 1, gameBoard );\r\n            scoreMove( belowRight, potentialNextMoves );\r\n\r\n            let belowLeft = BoardManager.tryGetCell( c.col - 1, c.row + 1, gameBoard );\r\n            scoreMove( belowLeft, potentialNextMoves );\r\n        } );\r\n\r\n        return potentialNextMoves;\r\n    }\r\n\r\n    function moveEarnsPoints( cell ) {\r\n        let [x,  otherPlayerNumber ] = getPlayerNumbers(),\r\n            hits = _scoreKeeper.setScoreForMove( cell.col, cell.row, otherPlayerNumber, gameBoard ),\r\n            points = hits.length,\r\n            isHit = cell.player === 0 && points > 0;\r\n\r\n        return { isHit: isHit, points: points };\r\n    }\r\n\r\n    function scoreMove( move, potentialNextMoves ) {\r\n        if ( move === null ) return;\r\n\r\n        let moveResult = moveEarnsPoints( move );\r\n        console.log( \"isHit: %d %d points: %d\", move.row, move.col, moveResult.points );\r\n        if ( moveResult.isHit ) {\r\n            move.potentialTarget = true;\r\n            move.pointValue = moveResult.points;\r\n\r\n            if ( potentialNextMoves.indexOf( move ) === -1 )\r\n                potentialNextMoves.push( move );\r\n        }\r\n    }\r\n\r\n    function updateActivePlayer( newPlayerNumber ) {\r\n        let playerIndex = newPlayerNumber === 1 ? 0 : 1;\r\n        _activePlayer = _players[ playerIndex ];\r\n    }\r\n\r\n    function updateScoreBoards( players ) {\r\n        players.forEach( function ( player ) {\r\n            let $playerSoreBoard = $( \".player-\" + player.number );\r\n\r\n            player.score = _scoreKeeper.getScoreForPlayer( player.number, gameBoard );\r\n\r\n            $( \".player-\" + player.number + \" .score\" ).html( player.score );\r\n            $( \".player-\" + player.number + \" .moves\" ).html( player.moves.length );\r\n\r\n            if ( player.number === _activePlayer.number ) {\r\n                $playerSoreBoard.addClass( \"active\" );\r\n            } else {\r\n                $playerSoreBoard.removeClass( \"active\" );\r\n            }\r\n        } );\r\n    }\r\n\r\n    function setNewGameValues() {\r\n        gameBoard.rows[ 3 ][ 3 ].player = 1;\r\n        gameBoard.rows[ 4 ][ 3 ].player = 2;\r\n        gameBoard.rows[ 3 ][ 4 ].player = 2;\r\n        gameBoard.rows[ 4 ][ 4 ].player = 1;\r\n\r\n        // mark player one potential targets\r\n        gameBoard.rows[ 2 ][ 4 ].potentialTarget = true;\r\n        gameBoard.rows[ 3 ][ 5 ].potentialTarget = true;\r\n        gameBoard.rows[ 4 ][ 2 ].potentialTarget = true;\r\n        gameBoard.rows[ 5 ][ 3 ].potentialTarget = true;\r\n    }\r\n\r\n    function getPlayerNumbers() {\r\n        let otherPlayerIndex = _activePlayer.number === 1 ? 1 : 0;\r\n        return [ _activePlayer.number, _players[ otherPlayerIndex ].number ];\r\n    }\r\n\r\n    setNewGameValues();\r\n    renderGameBoard();\r\n    updateScoreBoards( _players );\r\n\r\n\r\n    console.log( \"Empty cells: \", _scoreKeeper.getEmptyCells( gameBoard ) );\r\n})();\r\n"],"sourceRoot":"/source/"}