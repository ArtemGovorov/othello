{"version":3,"sources":["BoardManager.js","Repository.js","ScoreKeeper.js","models.js","othello.js"],"names":["BoardManager","tryGetCell","x","y","gameBoard","this","isValidMove","rows","Repository","snapshots","prototype","recordMove","data","snapshot","getSnapshotPattern","console","log","push","snapShots","gameboard","moves","reduce","pattern","move","player","wasHighestScoring","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","ScoreKeeper","value","playerNumber","self","getEmptyCells","forEach","cell","setScoreForMove","col","row","_this","hits","searchDirections","direction","concat","Array","apply","getFlatGameBoard","filter","c","rowInc","colInc","getScore","_x","_x2","_again","r","checkResult","undefined","checkCell","isEmpty","isPoint","cells","valid","empty","point","score","isHighestScoring","startingX","startingY","searchAt","calculatePoints","Player","num","number","Move","points","playerId","pointValue","time","timeInMatch","Cell","potentialTarget","_slicedToArray","sliceIterator","arr","_arr","_n","_d","_e","_s","_i","Symbol","iterator","next","done","err","isArray","renderGameBoard","html","j","$","getPotentialNextMovesForNextPlayer","flatGamBoard","_scoreKeeper","activePlayerCells","_activePlayer","potentialNextMoves","above","scoreMove","aboveRight","aboveLeft","left","right","below","belowRight","belowLeft","moveEarnsPoints","_getPlayerNumbers3","getPlayerNumbers","_getPlayerNumbers32","otherPlayerNumber","isHit","moveResult","indexOf","updateActivePlayer","newPlayerNumber","playerIndex","_players","updateScoreBoards","players","$playerSoreBoard","getScoreForPlayer","addClass","removeClass","setNewGameValues","potentialMoves","otherPlayerIndex","_playerOne","_playerTwo","_gameOver","_startTime","Date","_repo","_lastMoveTime","rowNum","colNum","recordTimeForMove","matchStartTime","now","timestamp","gameCompleted","on","$cell","cellObj","isTarget","_getPlayerNumbers","_getPlayerNumbers2","activePlayerNumber","pointsEarned","h","highestScoringNextMove","sort","c1","c2","resetMoveScoreRatings"],"mappings":"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","file":"app.js","sourcesContent":["/**\r\n * Created by Eric on 4/9/2015.\r\n */\r\n\r\nvar BoardManager = {\r\n    tryGetCell: function ( x, y, gameBoard ) {\r\n        return this.isValidMove( x, y ) ?\r\n            gameBoard.rows[ y ][ x ] :\r\n            null;\r\n    },\r\n    isValidMove: function ( x, y ) {\r\n        //console.log(\"isValidMove: %d %d \", x, y);\r\n        return ( x > -1 && y > -1 ) && ( x < 8 && y < 8 );\r\n    }\r\n};\r\n","/**\r\n * Created by Eric on 4/12/2015.\r\n */\r\n\r\nvar Repository = function () {\r\n    this.snapshots = [];\r\n};\r\n\r\nRepository.prototype.recordMove = function ( data ) {\r\n    let snapshot = this.getSnapshotPattern( data.gameBoard );\r\n    console.log( \"Snapshot created: \", snapshot );\r\n\r\n    this.snapshots.push( snapshot );\r\n    data.snapShots = this.snapshots;\r\n    console.log( \"Saving Data: \", data );\r\n};\r\n\r\nRepository.prototype.getSnapshotPattern = function ( gameboard ) {\r\n    return gameboard.moves.reduce( function ( pattern, move ) {\r\n        return pattern + `${move.x}-${move.y}-${move.player}-${ +move.wasHighestScoring || 0},`;\r\n    }, \"\" );\r\n};\r\n","/**\r\n * Created by Eric on 4/5/2015.\r\n */\r\nclass ScoreKeeper {\r\n    constructor() { }\r\n\r\n    playerHasNextMove( playerNumber, gameBoard ) {\r\n        let self = this;\r\n        self.getEmptyCells( gameBoard ).forEach( ( cell ) => {\r\n            if ( self.setScoreForMove( cell.col, cell.row, playerNumber ) > 0 )\r\n                return true;\r\n        } );\r\n\r\n        return false;\r\n    }\r\n\r\n    setScoreForMove( x, y, player, gameBoard ) {\r\n        let hits = [],\r\n            searchDirections = [\r\n              \"Up\",\r\n              \"UpAndRight\",\r\n              \"Right\",\r\n              \"DownAndRight\",\r\n              \"Down\",\r\n              \"DownAndLeft\",\r\n              \"Left\", \r\n              \"UpAndLeft\"\r\n            ];\r\n\r\n        searchDirections.forEach( ( direction ) => {\r\n          hits = hits.concat( this[\"search\" + direction]( x, y, player, gameBoard ) );\r\n        } );\r\n\r\n        return hits;\r\n    }\r\n\r\n    getFlatGameBoard( gameBoard ) {\r\n        return Array.prototype.concat.apply( [], gameBoard.rows );\r\n    }\r\n\r\n    getEmptyCells( gameBoard ) {\r\n        return this.getFlatGameBoard( gameBoard ).filter( ( c ) => {\r\n            return c.player === 0;\r\n        } );\r\n    }\r\n\r\n    calculatePoints( cell, rowInc, colInc, player, gameBoard ) {\r\n        let cells = [], self = this;\r\n\r\n        function getScore( r, c ) {\r\n            if ( BoardManager.tryGetCell( c, r, gameBoard ) === null ) {\r\n                return [];\r\n            }\r\n\r\n            let cell = gameBoard.rows[ r ][ c ],\r\n                checkResult = self.checkCell( cell, player );\r\n\r\n            if ( !checkResult.isValidMove || checkResult.isEmpty ) {\r\n                return [];\r\n            } else if ( checkResult.isPoint ) {\r\n                cells.push( cell );\r\n                return getScore( r + rowInc, c + colInc );\r\n            } else {\r\n                return cells;\r\n            }\r\n        }\r\n\r\n        return getScore( cell.row, cell.col );\r\n    }\r\n\r\n    checkCell( cell, player ) {\r\n        let valid = BoardManager.isValidMove( cell.col, cell.row ),\r\n            empty = valid ? cell.player === 0 : false,\r\n            point = valid ? cell.player !== player && !empty : false;\r\n\r\n        return {\r\n            isValidMove: valid,\r\n            isEmpty: empty,\r\n            isPoint: point\r\n        };\r\n    }\r\n\r\n    getScoreForPlayer( playerNumber, gameBoard ) {\r\n        return this.getFlatGameBoard( gameBoard ).reduce( ( score, cell ) => {\r\n            if ( cell.player === playerNumber )\r\n                score++;\r\n\r\n            return score;\r\n        }, 0 )\r\n    }\r\n\r\n    resetMoveScoreRatings( gameBoard ) {\r\n        this.getFlatGameBoard( gameBoard ).forEach( ( cell ) => {\r\n            cell.isHighestScoring = false;\r\n        } );\r\n\r\n        return gameBoard;\r\n    }\r\n\r\n    searchRight( startingX, startingY, player, gameBoard ) {\r\n        return this.searchAt( startingX, startingY, 0, 1, player, gameBoard );\r\n    }\r\n\r\n    searchLeft( startingX, startingY, player, gameBoard ) {\r\n        return this.searchAt( startingX, startingY, 0, -1, player, gameBoard );\r\n    }\r\n\r\n    searchUp( startingX, startingY, player, gameBoard ) {\r\n        return this.searchAt( startingX, startingY, -1, 0, player, gameBoard );\r\n    }\r\n\r\n    searchDown( startingX, startingY, player, gameBoard ) {\r\n        return this.searchAt( startingX, startingY, 1, 0, player, gameBoard );\r\n    }\r\n\r\n    searchUpAndRight( startingX, startingY, player, gameBoard ) {\r\n        return this.searchAt( startingX, startingY, -1, 1, player, gameBoard );\r\n    }\r\n\r\n    searchUpAndLeft( startingX, startingY, player, gameBoard ) {\r\n        return this.searchAt( startingX, startingY, -1, -1, player, gameBoard );\r\n    }\r\n\r\n    searchDownAndRight( startingX, startingY, player, gameBoard ) {\r\n        return this.searchAt( startingX, startingY, 1, 1, player, gameBoard );\r\n    }\r\n\r\n    searchDownAndLeft( startingX, startingY, player, gameBoard ) {\r\n        return this.searchAt( startingX, startingY, 1, -1, player, gameBoard );\r\n    }\r\n\r\n    searchAt( x, y, rowInc, colInc, player, gameBoard ) {\r\n        let cell = BoardManager.tryGetCell(  x + colInc , y + rowInc , gameBoard );\r\n        return cell !== null ?\r\n            this.calculatePoints( cell, rowInc, colInc, player, gameBoard ) : [];\r\n    }\r\n\r\n\r\n}\r\n","/**\r\n * Created by Eric on 4/4/2015.\r\n */\r\n\r\nclass Player {\r\n    constructor ( num ) {\r\n        this.number = num;\r\n        this.score = 2;\r\n        this.moves = [];\r\n    }\r\n}\r\n\r\nclass Move {\r\n    constructor ( row, col, points, playerId, isHighestScoring ) {\r\n        this.x = col;\r\n        this.y = row;\r\n        this.pointValue = points;\r\n        this.player = playerId;\r\n        this.time = 0;\r\n        this.timeInMatch = 0;\r\n        this.wasHighestScoring = isHighestScoring;\r\n    }\r\n}\r\n\r\nclass Cell {\r\n    constructor( row, col ) {\r\n        this.row = row;\r\n        this.col = col;\r\n        this.player = 0;\r\n        this.potentialTarget = false;\r\n    }\r\n}\r\n","\r\n/**\r\n * Created by Eric on 4/4/2015.\r\n */\r\n\r\n(() => {\r\n    let gameBoard = {\r\n            rows: [],\r\n            moves: []\r\n        },\r\n        _playerOne = new Player( 1 ),\r\n        _playerTwo = new Player( 2 ),\r\n        _activePlayer = _playerOne,\r\n        _players = [ _playerOne, _playerTwo ],\r\n        _scoreKeeper, _gameOver = false,\r\n        _startTime = new Date(),\r\n        _repo = new Repository(),\r\n        _lastMoveTime = new Date();\r\n\r\n    const rowNum = 8;\r\n    const colNum = 8;\r\n\r\n    for ( let i = 0; i < rowNum; i++ ) {\r\n        let row = [];\r\n        for ( let j = 0; j < colNum; j++ ) {\r\n            row.push( new Cell( i, j ) );\r\n        }\r\n        gameBoard.rows.push( row );\r\n    }\r\n\r\n    _scoreKeeper = new ScoreKeeper();\r\n\r\n    function renderGameBoard() {\r\n        console.log( \"Gameboard: \", gameBoard );\r\n        let html = '';\r\n        gameBoard.rows.forEach( function ( row, i ) {\r\n            row.forEach( function ( cell, j ) {\r\n                html += `<div class='cell' data-target=\"${cell.potentialTarget}\" data-is-highest-scoring-move=\"${cell.isHighestScoring}\" data-player-num=\"${cell.player}\" data-row-num='${i}' data-col-num='${j}'>${cell.player}</div>`;\r\n            } );\r\n\r\n        } );\r\n\r\n        $( \".game-board\" ).html( html );\r\n    }\r\n\r\n    var recordTimeForMove = function ( move, matchStartTime ) {\r\n        let now = new Date();\r\n        move.time = now - _lastMoveTime;\r\n        move.timeInMatch = now - matchStartTime;\r\n        _lastMoveTime = now;\r\n\r\n        console.log(\"Move recorded: \", move);\r\n\r\n        _repo.recordMove( {\r\n            players: _players,\r\n            gameBoard: gameBoard,\r\n            timestamp: now - matchStartTime,\r\n            gameCompleted: _gameOver\r\n        } );\r\n    };\r\n\r\n    $( \".game-board\" ).on( \"click\", \".cell\", function () {\r\n        let $cell = $( this );\r\n        let row = +$cell.data( \"row-num\" );\r\n        let col = +$cell.data( \"col-num\" );\r\n        let player = +$cell.data( \"player-num\" );\r\n        let isHighestScoring = $cell.data(\"is-highest-scoring-move\");\r\n        let cellObj = gameBoard.rows[ row ][ col ];\r\n        let isTarget = $cell.data( \"target\" );\r\n        let [ activePlayerNumber, otherPlayerNumber ] = getPlayerNumbers();\r\n\r\n        if ( !isTarget )\r\n            return;\r\n        // calculate points and set cell values\r\n        let hits = _scoreKeeper.setScoreForMove( col, row, activePlayerNumber, gameBoard );\r\n        let pointsEarned = hits.length;\r\n\r\n        if ( pointsEarned === 0 )\r\n            return;\r\n\r\n        let move = new Move( row, col, pointsEarned, activePlayerNumber, isHighestScoring );\r\n        gameBoard.moves.push( move );\r\n\r\n\r\n        cellObj.player = activePlayerNumber;\r\n\r\n        hits.forEach( function ( h ) {\r\n            h.player = activePlayerNumber\r\n        } );\r\n\r\n        recordTimeForMove( move, _startTime );\r\n\r\n        // check if next player has any moves based on board state\r\n        // no, declare victory, else continue\r\n        let potentialNextMoves = getPotentialNextMovesForNextPlayer();\r\n        console.log( \"Potential Next Moves: \", potentialNextMoves );\r\n        let highestScoringNextMove = potentialNextMoves.sort( function ( c1, c2 ) {\r\n            return c2.pointValue - c1.pointValue;\r\n        } )[ 0 ];\r\n\r\n        highestScoringNextMove.isHighestScoring = true;\r\n\r\n        //if ( gameOver ) {\r\n        //    // announce verdict\r\n        //    console.log(\"GAME OVER\");\r\n        //} else if ( nextPlayerHasMove ) {\r\n        //    updateActivePlayer( otherPlayerNumber );\r\n        //    // change active player in UI\r\n        //    console.log( \"It's now player %d's turn\", otherPlayerNumber );\r\n        //} else if ( currentPlayerHasMove ) {\r\n        //    // update UI with status\r\n        //    console.log( \"It's still player %d's turn\", otherPlayerNumber );\r\n        //}\r\n\r\n        updateActivePlayer( otherPlayerNumber );\r\n        renderGameBoard();\r\n        updateScoreBoards( _players );\r\n        _scoreKeeper.resetMoveScoreRatings( gameBoard );\r\n\r\n        if ( potentialNextMoves ) {\r\n            console.log( \"It's now player %d's turn\", otherPlayerNumber );\r\n        } else {\r\n            console.log( \"No next moves for player %d\", otherPlayerNumber );\r\n        }\r\n\r\n\r\n    } );\r\n\r\n    function getPotentialNextMovesForNextPlayer() {\r\n        let flatGamBoard = _scoreKeeper.getFlatGameBoard( gameBoard );\r\n        flatGamBoard.forEach( function ( cell ) {\r\n            cell.potentialTarget = false;\r\n        } );\r\n\r\n        let activePlayerCells = flatGamBoard\r\n            .filter( function ( cell ) {\r\n                return cell.player === _activePlayer.number;\r\n            } );\r\n\r\n        console.log( \"Active player cells: \", activePlayerCells );\r\n\r\n        let potentialNextMoves = [];\r\n\r\n        activePlayerCells.forEach( function ( c ) {\r\n            let above = BoardManager.tryGetCell( c.col, c.row - 1, gameBoard );\r\n            scoreMove( above, potentialNextMoves );\r\n\r\n            let aboveRight = BoardManager.tryGetCell( c.col + 1, c.row - 1, gameBoard );\r\n            scoreMove( aboveRight, potentialNextMoves );\r\n\r\n            let aboveLeft = BoardManager.tryGetCell( c.col - 1, c.row - 1, gameBoard );\r\n            scoreMove( aboveLeft, potentialNextMoves );\r\n\r\n            let left = BoardManager.tryGetCell( c.col - 1, c.row, gameBoard );\r\n            scoreMove( left, potentialNextMoves );\r\n\r\n            let right = BoardManager.tryGetCell( c.col + 1, c.row, gameBoard );\r\n            scoreMove( right, potentialNextMoves );\r\n\r\n            let below = BoardManager.tryGetCell( c.col, c.row + 1, gameBoard );\r\n            scoreMove( below, potentialNextMoves );\r\n\r\n            let belowRight = BoardManager.tryGetCell( c.col + 1, c.row + 1, gameBoard );\r\n            scoreMove( belowRight, potentialNextMoves );\r\n\r\n            let belowLeft = BoardManager.tryGetCell( c.col - 1, c.row + 1, gameBoard );\r\n            scoreMove( belowLeft, potentialNextMoves );\r\n        } );\r\n\r\n        return potentialNextMoves;\r\n    }\r\n\r\n    function moveEarnsPoints( cell ) {\r\n        let [x,  otherPlayerNumber ] = getPlayerNumbers(),\r\n            hits = _scoreKeeper.setScoreForMove( cell.col, cell.row, otherPlayerNumber, gameBoard ),\r\n            points = hits.length,\r\n            isHit = cell.player === 0 && points > 0;\r\n\r\n        return { isHit: isHit, points: points };\r\n    }\r\n\r\n    function scoreMove( move, potentialNextMoves ) {\r\n        if ( move === null ) return;\r\n\r\n        let moveResult = moveEarnsPoints( move );\r\n       // console.log( \"isHit: %d %d points: %d\", move.row, move.col, moveResult.points );\r\n        if ( moveResult.isHit ) {\r\n            move.potentialTarget = true;\r\n            move.pointValue = moveResult.points;\r\n\r\n            if ( potentialNextMoves.indexOf( move ) === -1 )\r\n                potentialNextMoves.push( move );\r\n        }\r\n    }\r\n\r\n    function updateActivePlayer( newPlayerNumber ) {\r\n        let playerIndex = newPlayerNumber === 1 ? 0 : 1;\r\n        _activePlayer = _players[ playerIndex ];\r\n    }\r\n\r\n    function updateScoreBoards( players ) {\r\n        players.forEach( function ( player ) {\r\n            let $playerSoreBoard = $( \".player-\" + player.number );\r\n\r\n            player.score = _scoreKeeper.getScoreForPlayer( player.number, gameBoard );\r\n\r\n            $( \".player-\" + player.number + \" .score\" ).html( player.score );\r\n            $( \".player-\" + player.number + \" .moves\" ).html( player.moves.length );\r\n\r\n            if ( player.number === _activePlayer.number ) {\r\n                $playerSoreBoard.addClass( \"active\" );\r\n            } else {\r\n                $playerSoreBoard.removeClass( \"active\" );\r\n            }\r\n        } );\r\n    }\r\n\r\n    function setNewGameValues() {\r\n        gameBoard.rows[ 3 ][ 3 ].player = 1;\r\n        gameBoard.rows[ 4 ][ 3 ].player = 2;\r\n        gameBoard.rows[ 3 ][ 4 ].player = 2;\r\n        gameBoard.rows[ 4 ][ 4 ].player = 1;\r\n\r\n        // mark player one potential targets\r\n        let potentialMoves = [\r\n            gameBoard.rows[ 2 ][ 4 ],\r\n            gameBoard.rows[ 3 ][ 5 ],\r\n            gameBoard.rows[ 4 ][ 2 ],\r\n            gameBoard.rows[ 5 ][ 3 ]\r\n        ];\r\n\r\n        potentialMoves.forEach( function ( cell ) {\r\n            cell.potentialTarget = true;\r\n        } );\r\n    }\r\n\r\n    function getPlayerNumbers() {\r\n        let otherPlayerIndex = _activePlayer.number === 1 ? 1 : 0;\r\n        return [ _activePlayer.number, _players[ otherPlayerIndex ].number ];\r\n    }\r\n\r\n    setNewGameValues();\r\n    renderGameBoard();\r\n    updateScoreBoards( _players );\r\n\r\n\r\n    console.log( \"Empty cells: \", _scoreKeeper.getEmptyCells( gameBoard ) );\r\n})();\r\n"],"sourceRoot":"/source/"}